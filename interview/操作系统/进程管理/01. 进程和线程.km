{
    "root": {
        "data": {
            "id": "cvhh41n2fc00",
            "created": 1694576152909,
            "text": "进程和线程",
            "hyperlink": "https://xiaolincoding.com/os/4_process/process_base.html",
            "hyperlinkTitle": "小林coding",
            "expandState": "expand"
        },
        "children": [
            {
                "data": {
                    "id": "cvhh7b9sj3s0",
                    "created": 1694576408966,
                    "text": "并发和并行",
                    "note": "![](https://camo.githubusercontent.com/2b837cc63e1db2ce43a971e99a21e81f58078089643be6a5cd27b1300d964e21/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f352d2545352542392542362545352538462539312545342542382538452545352542392542362545382541312538432e6a7067)\n\n"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cvhh4xckwps0",
                    "created": 1694576221932,
                    "text": "进程",
                    "note": "通过编译后就会生成二进制可执行文件，当我们运行这个可执行文件后，它会被装载到内存中，接着 CPU 会执行程序中的每一条指令，那么**这个运行中的程序，就被称为`进程`（Process）**。"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvhh8ev76gg0",
                            "created": 1694576495155,
                            "text": "进程的状态",
                            "note": "![](https://camo.githubusercontent.com/cb95c5cbdf31d28de6b935856704fc8598e8fb50c8d5addc528d584ea61b4060/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f382d2545382542462539422545372541382538422545342542412539342545342542382541412545372538412542362545362538302538312e6a7067)\n\n各种状态：\n\n- **运行状态（Running）**：正在被执行，该时刻进程占用CPU\n- **就绪状态（Ready）**：可运行，由于其它进程处于运行状态而暂时停止运行\n- **阻塞状态（Blocked）**：该进程正在等待某一事件的发生（例如等待输入/输出操作的完成）而暂时停止运行，此时即便给它 CPU 控制权，也无法运行\n- **创建状态（new）**：进程正在被创建\n- **结束状态（Exit）**：进程正在被销毁\n\n还有一个状态来描述**进程没有占用实际的物理内存空间**的情况，这个状态就是挂起状态：\n\n- **阻塞挂起状态（Suspended）**：进程在外存（硬盘）并等待某个事件的出现；\n- **就绪挂起状态（Suspended）**：进程在外存（硬盘），但只要进入内存，即刻立刻运行；\n\n导致进程挂起的原因主要有以下几种情况：\n\n- 通过 sleep 让进程间歇性挂起，其工作原理是设置一个定时器，到期后唤醒进程；\n- 用户希望挂起一个程序的执行，比如在 Linux 中用 `Ctrl+Z` 挂起进程；\n- 挂起阻塞状态的进程，避免浪费物理内存。\n\n![](https://camo.githubusercontent.com/12dd759be03b2846ced658d34f15dd1d29ce58d6760f08eb305d9f64778315de/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f31302d2545382542462539422545372541382538422545342542382538332545342542382541442545372538412542362545362538302538312e6a7067)"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvhk7iyl5880",
                            "created": 1694584889033,
                            "text": "进程的控制结构",
                            "note": "在操作系统中，是用`进程控制块（process control block，PCB）`数据结构来描述进程的。\n\n**PCB 是进程存在的唯一标识**，这意味着一个进程的存在，必然会有一个 PCB，如果进程消失了，那么 PCB 也会随之消失。\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvhk9mz5f2g0",
                                    "created": 1694585054502,
                                    "text": "包含的信息",
                                    "note": "进程描述信息：\n\n- 进程标识符：每个进程都有唯一的标识符\n- 用户标识符：进程归属的用户，用户标识符主要为共享和保护服务\n\n进程控制和管理信息：\n\n- 进程的状态\n- 进程的优先级：进程抢占 CPU 时的优先级\n\n资源分配清单：\n\n- 有关内存地址空间或虚拟地址空间信息\n- 打开的文件列表\n- 使用的 I/O 设备信息\n\nCPU 相关信息：\n\n- CPU 中各个寄存器的值：当进程被切换时，CPU 的状态信息都会被保存到相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhkeesf9600",
                                    "created": 1694585428502,
                                    "text": "如何组织",
                                    "note": "通过**链表**的方式进行组织，把具有**相同状态的进程链在一起，组成各种队列**。比如：\n\n- 把所有处于就绪状态的进程链在一起，称为就绪队列；\n- 把所有因等待某事件而处于等待状态的进程链在一起就组成各种阻塞队列；\n- 对于运行队列在单核 CPU 系统中只有一个运行指针，因为单核 CPU 在某个时间，只能运行一个程序。\n\n![](https://camo.githubusercontent.com/85f5383524ad31ed10e61b232f2e52d68fca8b35d53eae34bb493cd48c7d2d21/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f31322d5043422545372538412542362545362538302538312545392539332542452545382541312541382545372542422538342545372542422538372e6a7067)\n\n除了链接的组织方式，还有索引方式。将同一状态的进程组织在一个索引表中，索引表项指向相应的 PCB，不同状态对应不同的索引表。\n\n一般会选择链表，因为可能面临进程创建，销毁等调度导致进程状态发生变化，所以链表能够更加灵活的插入和删除。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cvhkgvlbam80",
                            "created": 1694585621806,
                            "text": "进程的控制"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvhkhra0nxc0",
                                    "created": 1694585690780,
                                    "text": "创建进程",
                                    "note": "操作系统允许一个进程创建另一个进程，而且允许子进程继承父进程所拥有的资源。\n\n创建进程的过程如下：\n\n- 申请一个空白的 PCB，并向 PCB 中填写一些描述、控制和管理进程的信息，比如进程的唯一标识等；\n- 为该进程分配运行时所必需的资源，比如内存资源；\n- 将 PCB 插入到就绪队列，等待被调度运行；\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhkj1yjfkw0",
                                    "created": 1694585792395,
                                    "text": "终止进程",
                                    "note": "有 3 种终止方式：正常结束、异常结束以及外界干预（信号 kill 掉）。\n\n- 当子进程被终止时，其在父进程处继承的资源应当还给父进程。\n- 而当父进程被终止时，该父进程的子进程就变为孤儿进程，会被 `1 号进程`收养，并由 1 号进程对它们完成状态收集工作。\n\n过程如下：\n\n- 查找需要终止的进程的 PCB\n- 如果处于执行状态，则立即终止该进程的执行，然后将 CPU 资源分配给其他进程\n- 如果还有子进程，则应将子进程交给 1 号进程接管\n- 将该进程所拥有的全部资源归还给操作系统\n- 将其从 PCB 所在的队列中删除"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhkm0xlt680",
                                    "created": 1694586025254,
                                    "text": "阻塞进程",
                                    "note": "当进程需要等待某一事件完成时，它可以调用阻塞语句把自己阻塞等待。而**一旦被阻塞等待，它只能由另一个进程唤醒**。\n\n过程如下：\n\n- 找到将要被阻塞进程标识号所对应的 PCB\n- 如果该进程为运行状态，则保护其现场，将状态转换为阻塞状态，停止运行\n- 将该 PCB 插入到阻塞队列中\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhknnwm06o0",
                                    "created": 1694586153624,
                                    "text": "唤醒进程",
                                    "note": "如果某进程正在等待阻塞事件的完成，需由别的进程发消息给它，则只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。\n\n过程如下：\n\n-  在该事件的阻塞队列中找到相应进程的 PCB\n- 将其从阻塞队列中移出，并置其状态为 就绪状态\n- 把该 PCB 插入到就绪队列中，等待调度程序调度\n"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cvhl68sm2k00",
                            "created": 1694587609649,
                            "text": "进程的上下文切换",
                            "note": "一个进程切换到另一个进程运行，称为`进程的上下文切换`。\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvhlevb2uwo0",
                                    "created": 1694588285569,
                                    "text": "CPU 上下文",
                                    "note": "大多数操作系统都是多任务，通常支持大于 CPU 数量的任务同时运行。实际上，这些任务并不是同时运行的，只是因为系统在很短的时间内，让各个任务分别在 CPU 运行，于是就造成同时运行的错觉。\n\n在每个任务运行前，CPU 需要知道任务从哪里加载，又从哪里开始运行。\n\n所以，操作系统需要事先帮 CPU 设置好 **CPU 寄存器和程序计数器**。\n\n- CPU 寄存器是 CPU 内部一个容量小，但是速度极快的内存（缓存）。\n- 程序计数器则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。\n\n所以说，CPU 寄存器和程序计数是 CPU 在运行任何任务前，所必须依赖的环境，这些环境就叫做 `CPU 上下文`。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhlb3e5ruo0",
                                    "created": 1694587989712,
                                    "text": "CPU 上下文切换",
                                    "note": "大多数操作系统都是多任务，通常支持大于 CPU 数量的任务同时运行。实际上，这些任务并不是同时运行的，只是因为系统在很短的时间内，让各个任务分别在 CPU 运行，于是就造成同时运行的错觉。\n\n在每个任务运行前，CPU 需要知道任务从哪里加载，又从哪里开始运行。\n\n所以，操作系统需要事先帮 CPU 设置好 **CPU 寄存器和程序计数器**。\n\n- CPU 寄存器是 CPU 内部一个容量小，但是速度极快的内存（缓存）。\n- 程序计数器则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。\n\n所以说，CPU 寄存器和程序计数是 CPU 在运行任何任务前，所必须依赖的环境，这些环境就叫做 `CPU 上下文`。\n\nCPU 上下文切换就是把先前一个任务的 CPU 上下文（CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文，最后再跳转到程序计数器所指的新位置，运行新任务。\n\n内核会存储保存下来的上下文信息，当任务再次分配给 CPU 运行时，CPU 会重新加载这些上下文，这样就能保证任务原来的状态不受影响，让任务看起来是连续运行的。\n\n可以根据任务的不同，把 CPU 上下文切换分成：\n\n- 进程上下文切换\n- 线程上下文切换\n- 中断上下文切换"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhlefqn7y80",
                                    "created": 1694588251681,
                                    "text": "进程的上下文切换",
                                    "note": "进程是由内核管理和调度的，所以**进程的切换只能发生在内核态**。\n\n所以，**进程的上下文切换不仅包含了 虚拟内存、栈、全局变量 等 用户空间 的资源，还包括了 内核堆栈、寄存器  等 内核空间 的资源**。\n\n通常，会把交换的信息保存在进程的 PCB，当要运行另外一个进程的时候，我们需要从这个进程的 PCB 取出上下文，然后加载到 CPU 中，这使得这个进程可以执行。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhlhwnplaw0",
                                    "created": 1694588523602,
                                    "text": "发生切换的场景",
                                    "note": "- 分配给进程的时间片耗尽了。\n\n\tCPU 时间被划分为一段段的时间片，这些时间片被轮流分配给各个进程，以保障所有进程都可以得到公平的调度。时间片耗尽后，进程变为就绪状态\n\n- 进程运行时遇到系统资源不足（比如内存不足）需要等待时。\n\n\t当进程要等待满足资源条件才能运行时，会被挂起，由系统调度其他进程运行\n\t\n- 进程主动将自己挂起。\n\n\t比如通过 sleep 函数\n\n- 当有优先级更高的进行运行时。\n\n\t为了保证高优先级进程的运行，当前现场会被挂起，运行高优先级的进程\n\n- 发生硬件中断时。\n\n    CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cvhlpxrx24w0",
                    "created": 1694589152946,
                    "text": "线程",
                    "note": "**`线程（Thread）`是是进程当中的一条执行流程**，是比进程更小的能独立运行的基本单位。\n\n同一个进程内多个线程之间可以**共享代码段、数据段、打开的文件**等资源，但每个线程各自都有一套**独立的寄存器和栈**，这样可以确保线程的控制流是相对独立的。\n\n![](https://camo.githubusercontent.com/90525e3f2f81586af6657e828d21766f65989c02c350909c3dd746ac74a43de7/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f31362d2545352541342539412545372542412542462545372541382538422545352538362538352545352541442539382545372542422539332545362539452538342e6a7067)"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvhlsrf41nk0",
                            "created": 1694589374204,
                            "text": "优缺点",
                            "note": "优点：\n\n- 一个进程可以同时存在多个线程\n- 各个线程之间可以并发执行\n- 各个线程之间可以共享地址空间和文件等资源\n\n缺点：\n\n当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对 C/C++ 语言，Java 语言中的线程奔溃不会造成进程崩溃，具体分析原因可以看这篇：[线程崩溃了，进程也会崩溃吗？](https://xiaolincoding.com/os/4_process/thread_crash.html)）。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvhlvl7ojfk0",
                            "created": 1694589595786,
                            "text": "进程和线程",
                            "note": "- **进程是资源（包括内存、打开的文件等）分配的基本单位，线程是 CPU 调度的基本单位**；这是它们最大的区别。\n- 进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；\n- 线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；\n- 线程能减少并发执行的时间和空间开销；\n\n线程相比进程能减少开销，体现在：\n\n- 线程的创建时间比进程快\n\n\t因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；\n\n- 线程的终止时间比进程快\n\n\t因为线程释放的资源相比进程少很多；\n\n- 同一个进程内的线程切换比进程切换快\n\n\t因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；\n\n- 由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvhm2ecfuqo0",
                            "created": 1694590129385,
                            "text": "线程的上下文切换",
                            "note": "线程与进程最大的区别在于：**线程是调度的基本单位，而进程则是资源拥有的基本单位**。\n\n所谓操作系统的任务调度，实际上的调度对象是线程，而进程只是给线程提供了虚拟内存、全局变量等资源。\n\n对于线程和进程，我们可以这么理解：\n\n- 当进程只有一个线程时，可以认为进程就等于线程；\n- 当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源，这些资源在上下文切换时是不需要修改的；\n\n线程上下文切换：\n\n- 当两个线程不是属于同一个进程，则切换的过程就跟进程上下文切换一样；\n- 当两个线程是属于同一个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据（栈、寄存器等）等不共享的数据；\n\n所以，线程的上下文切换相比进程，开销要小很多。\n"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvhm4nskifc0",
                            "created": 1694590306680,
                            "text": "线程的实现",
                            "note": "线程的实现方式：\n\n- **用户线程（User Thread）**：在用户空间实现的线程，不是由内核管理的线程，由用户态的线程库来完成线程的管理\n- **内核线程（Kernel Thread）**：在内核中实现的线程，是由内核管理的线程\n- **轻量级进程（LightWeight Process）**：在内核中支持用户线程\n\n用户线程和内核线程的三种对应关系：\n\n- 多对一，多个用户线程对应一个内核线程\n- 一对一，一个用户线程对应一个内核线程\n- 多对多，多个用户线程对应多个内核线程"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvhm8o9euq80",
                                    "created": 1694590621155,
                                    "text": "用户线程",
                                    "note": "用户线程是基于用户态的线程管理库来实现的，那么`线程控制块（Thread Control Block, TCB）` 也是在库里面来实现的，对于**操作系统而言是看不到这个 TCB 的，它只能看到整个进程的 PCB**。\n\n所以，**用户线程的整个线程管理和调度，操作系统不参与**，由用户级线程库来完成线程的管理，包括线程的创建、终止、同步和调度等。\n\n用户级线程的模型，也就类似前面提到的多对一的关系，即多个用户线程对应同一个内核线程，如下图所示：\n\n![](https://camo.githubusercontent.com/4425bb6aca1ea7bebba90c1225077f6b5cb69c8ef46cf126b9036a1d08093925/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f32302d2545372542412542462545372541382538425043422d2545342542382538302545352541462542392545352541342539412545352538352542332545372542332542422e6a7067)\n\n优点：\n\n- 每个进程都需要有它私有的线程控制块（TCB）列表，用来跟踪记录它各个线程状态信息（PC、栈指针、寄存器），TCB 由用户级线程库函数来维护，可用于不支持线程技术的操作系统；\n- 用户线程的切换也是由线程库函数来完成的，无需用户态与内核态的切换，所以**速度特别快**；\n\n缺点：\n\n- 由于操作系统不参与线程的调度，如果一个线程发起了系统调用而**阻塞**，那进程所包含的用户线程都不能执行了。\n- 当一个线程开始运行后，除非它主动地交出 CPU 的使用权，否则它所在的进程当中的其他线程无法运行，因为用户态的线程**没法打断**当前运行中的线程，它没有这个特权，只有操作系统才有，但是用户线程不是由操作系统管理的。\n- 由于时间片分配给进程，故与其他进程比，在多线程执行时，每个线程得到的时间片较少，**执行会比较慢**；"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhmdp8mbio0",
                                    "created": 1694591015105,
                                    "text": "内核线程",
                                    "note": "**内核线程是由操作系统管理的，线程对应的 TCB 自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责**。\n\n内核线程的模型，也就类似前面提到的一对一的关系，即一个用户线程对应一个内核线程，如下图所示：\n![](https://camo.githubusercontent.com/779608089247d58e57e6f14c1f0eeacd4d8b06ecdcfd47df94aa325c21cb3539/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f32312d2545372542412542462545372541382538425043422d2545342542382538302545352541462542392545342542382538302545352538352542332545372542332542422e6a7067)\n\n优点：\n\n- 在一个进程当中，如果某个内核线程发起系统调用而被阻塞，并**不会影响其他内核线程的运行**；\n- 时间片分配给线程，多线程的**进程获得更多的 CPU 运行时间**；\n\n缺点：\n\n- 在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息，如 PCB 和 TCB；\n- 线程的创建、终止和切换都是通过系统调用的方式来进行，因此对于系统来说，**系统开销比较大**；\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhmfx08mo00",
                                    "created": 1694591188741,
                                    "text": "轻量级进程",
                                    "note": "**轻量级进程（Light-weight process，LWP）是内核支持的用户线程，一个进程可以有一个或多个 LWP，每个 LWP 是跟内核线程一对一映射的，而且 LWP 由内核管理并像普通进程一样被调度。\n\n在大多数系统中，**LWP 和普通进程的区别在于它只有一个最小的执行上下文和调度程序所需的统计信息**。一般来说，一个进程代表程序的一个实例，而 LWP 代表程序的执行线程，因为一个执行线程不像进程那样需要那么多状态信息，所以 LWP 也不带有这样的信息。\n\n在 LWP 之上也是可以使用用户线程的，那么 LWP 与用户线程的对应关系就有三种：\n\n- 1 : 1，即一个 LWP 对应 一个用户线程；\n- N : 1，即一个 LWP 对应多个用户线程；\n- M : N，即多个 LWP 对应多个用户线程；\n\n下图是 LWP 模型：\n![](https://camo.githubusercontent.com/c73c95eba865f4c32b16bcfbc47fd63c3b865ae2e8b197d7a0c0290edeff8252/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f32322d4c57502e6a7067)\n\n*1 : 1 模式*\n\n一个用户线程对应到一个 LWP 再对应到一个内核线程，如上图的进程 4，属于此模型。\n\n- 优点：实现并行，当一个 LWP 阻塞，不会影响其他 LWP；\n- 缺点：每一个用户线程，就产生一个内核线程，创建线程的开销较大。\n\n*N : 1 模式*\n\n多个用户线程对应一个 LWP 再对应一个内核线程，如上图的进程 2，线程管理是在用户空间完成的，此模式中用户的线程对操作系统不可见。\n\n- 优点：用户线程要开几个都没问题，且上下文切换发生在用户空间，切换的效率较高；\n- 缺点：一个用户线程如果阻塞了，则整个进程都将会阻塞，另外在多核 CPU 中，是没办法充分利用 CPU 的。\n\n*M : N 模式*\n\n根据前面的两个模型混搭一起，就形成 M:N 模型，该模型提供了两级控制，首先多个用户线程对应到多个 LWP，LWP 再一一对应到内核线程，如上图的进程 3。\n\n- 优点：综合了前两种优点，大部分的线程上下文发生在用户空间，且多个线程又可以充分利用多核 CPU 的资源。\n\n*组合模式*\n\n如上图的进程 5，此进程结合 1:1 模型和 M:N 模型。开发人员可以针对不同的应用特点调节内核线程的数目来达到物理并行性和逻辑并行性的最佳方案。"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cvhnds0ogz40",
                    "created": 1694593842265,
                    "text": "调度",
                    "note": "选择一个进程运行这一功能是在操作系统中完成的，通常称为`调度程序（scheduler）`。\n\n说明：本小节的进程指只有主线程的进程。"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvhnf2c4idk0",
                            "created": 1694593943089,
                            "text": "调度时机",
                            "note": "进程状态的变化会触发操作系统的调度：\n\n- 就绪态变成运行态\n- 运行态变成阻塞态\n- 运行态变成结束态\n\n因为，这些状态变化的时候，操作系统需要考虑是否要让新的进程给 CPU 运行，或者是否让当前进程从 CPU 上退出来而换另一个进程运行。\n\n另外，如果硬件时钟提供某个频率的周期性中断，那么可以根据如何处理时钟中断 ，把调度算法分为两类：\n\n- `非抢占式调度算法`，挑选一个进程，然后让该进程一直运行，直到被阻塞或退出，才会调用另外一个进程，不理会时钟中断。\n- `抢占式调度算法`，挑选一个进程，然后让该进程只运行某段时间，若时间片耗尽之后，其仍在运行，那么就把它挂起，接着从就绪队列挑选另一个进程。这种抢占式调度处理，需要在时间间隔的末端发生`时钟中断`，以便把 CPU 控制返回给调度程序进行调度，也就是常说的`时间片机制`。此时也会触发调度任务。\n"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvhnkae35m80",
                            "created": 1694594352443,
                            "text": "调度原则",
                            "note": "1. 为了提高 CPU 利用率，在发送 I/O 事件这种**致使 CPU 空闲的情况下，调度程序需要从就绪队列中选择一个进程来运行**。\n1. 有的程序执行某个任务花费的时间会比较长，如果这个程序一直占用着 CPU，会造成系统吞吐量（CPU 在单位时间内完成的进程数量）的降低。**要提高系统的吞吐率，调度程序要权衡长任务和短任务进程的运行完成数量**。\n1. 从进程开始到结束的过程中，实际上是包含两个时间，分别是进程运行时间和进程等待时间，这两个时间总和就称为周转时间。进程的周转时间越小越好，**如果进程的等待时间很长而运行时间很短，那周转时间就很长，这不是我们所期望的，调度程序应该避免这种情况发生**。\n1. 处于就绪队列的进程，也不能等太久，当然希望这个等待的时间越短越好，这样可以使得进程更快的在 CPU 中执行。所以，**就绪队列中进程的等待时间也是调度程序所需要考虑的原则**。\n1. 对于鼠标、键盘这种交互式比较强的应用，我们当然希望它的响应时间越快越好，否则就会影响用户体验了。所以，**对于交互式比较强的应用，响应时间也是调度程序需要考虑的原则**。\n\n针对上面的五种调度原则，总结成如下：\n\n- CPU 利用率：调度程序应确保 CPU 是始终匆忙的状态，这可提高 CPU 的利用率；\n- 系统吞吐量：吞吐量表示的是单位时间内 CPU 完成进程的数量，长作业的进程会占用较长的 CPU 资源，因此会降低吞吐量，相反，短作业的进程会提升系统吞吐量；\n- 周转时间：周转时间是进程运行+阻塞时间+等待时间的总和，一个进程的周转时间越小越好；\n- 等待时间：这个等待时间不是阻塞状态的时间，而是进程处于就绪队列的时间，等待的时间越长，用户越不满意；\n- 响应时间：用户提交请求到系统第一次产生响应所花费的时间，在交互式系统中，响应时间是衡量调度算法好坏的主要标准。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvhnoheoecg0",
                            "created": 1694594681173,
                            "text": "单核 CPU 系统调度算法",
                            "note": "以下是**单核 CPU 系统**中常见的调度算法。"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvhnq26uwi80",
                                    "created": 1694594804776,
                                    "text": "先来先服务调度算法",
                                    "note": "非抢占式的`先来先服务（First Come First Serve, FCFS）算法`。\n\n**每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行**。\n\nFCFS 对长作业有利，不利于短作业。适用于 CPU 繁忙型作业的系统，而不适用于 I/O 繁忙型作业的系统。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhnroeb3hs0",
                                    "created": 1694594931480,
                                    "text": "最短作业优先调度算法",
                                    "note": "`最短作业优先（Shortest Job First, SJF）调度算法`，它会**优先选择运行时间最短的进程来运行**，这有助于提高系统的吞吐量。\n\n这显然对长作业不利，很容易造成一种极端现象。\n\n比如，一个长作业在就绪队列等待运行，而这个就绪队列有非常多的短作业，那么就会使得长作业不断的往后推，周转时间变长，致使长作业长期不会被运行。\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhnsqiki5c0",
                                    "created": 1694595014456,
                                    "text": "高响应比优先调度算法",
                                    "note": "`高响应比优先 （Highest Response Ratio Next, HRRN）调度算法`，**每次进行进程调度时，先计算「响应比优先级」，然后把「响应比优先级」最高的进程投入运行**。权衡了短作业和长作业。\n\n![](https://camo.githubusercontent.com/093ca7a90901e757dd2ca1125e122b645ec183244d3e3a2038248e51ff74b318/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f32362d2545352539332538442545352542412539342545362541462539342545352538352541432545352542432538462e6a7067)\n\n- 如果两个进程的「等待时间」相同时，「要求的服务时间」越短，「响应比」就越高，这样短作业的进程容易被选中运行；\n- 如果两个进程「要求的服务时间」相同时，「等待时间」越长，「响应比」就越高，这就兼顾到了长作业进程，因为进程的响应比可以随时间等待的增加而提高，当其等待时间足够长时，其响应比便可以升到很高，从而获得运行的机会；\n\n!!! note\n\t一个进程要求服务的时间是不可预估的。所以，高响应比优先调度算法是「理想型」的调度算法，现实中是实现不了的。\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhnv07u2iw0",
                                    "created": 1694595192303,
                                    "text": "时间片轮转调度算法",
                                    "note": "最古老、最简单、最公平且使用最广的算法就是`时间片轮转（Round Robin, RR）调度算法`。\n\n**每个进程被分配一个时间段，称为`时间片（Quantum）`，即允许该进程在该时间段中运行**。\n\n- 如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配给另外一个进程；\n- 如果该进程在时间片结束前**阻塞或结束**，则 CPU 立即进行切换；\n\n时间片的长度是一个很关键的点：\n\n- 如果时间片设得太短会导致过多的进程上下文切换，降低了 CPU 效率；\n- 如果设得太长又可能引起对短作业进程的响应时间变长。\n\n因此，在时间片轮转调度算法中，选择合适的时间片大小需要综合考虑系统的特点、作业的类型和需求。\n\n一般来说，时间片设为 `20ms~50ms` 通常是一个比较合理的折中值。\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhqvf2pyy00",
                                    "created": 1694603687975,
                                    "text": "最高优先级调度算法",
                                    "note": "`最高优先级（Highest Priority First，HPF）调度算法`，**调度程序能从就绪队列中选择最高优先级的进程进行运行**。\n\n进程的优先级可以分为：\n\n- 静态优先级：创建进程时候，就已经确定了优先级了，然后整个运行时间优先级都不会变化；\n- 动态优先级：根据进程的动态变化调整优先级，比如如果进程运行时间增加，则降低其优先级，如果进程等待时间（就绪队列的等待时间）增加，则升高其优先级，也就是**随着时间的推移增加等待进程的优先级**。\n\n该算法也有两种处理优先级高的方法，非抢占式和抢占式：\n\n- 非抢占式：当就绪队列中出现优先级高的进程，运行完当前进程，再选择优先级高的进程。\n- 抢占式：当就绪队列中出现优先级高的进程，当前进程挂起，调度优先级高的进程运行。\n\n但是依然有缺点，**可能会导致低优先级的进程永远不会运行**。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvhqzyqkku80",
                                    "created": 1694604044233,
                                    "text": "多级反馈队列调度算法",
                                    "note": "`多级反馈队列（Multilevel Feedback Queue）调度算法`是「时间片轮转算法」和「最高优先级算法」的综合和发展。\n\n- 「多级」表示有**多个队列，每个队列优先级从高到低，同时优先级越高时间片越短**。\n- 「反馈」表示如果有新的进程加入优先级高的队列时，**立刻停止当前正在运行的进程，转而去运行优先级高的队列**；\n\n![](https://camo.githubusercontent.com/f251d5fce6795abbe2aeb2980ea835c9bd78da581b435f1335d996190d8483ec/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545382542462539422545372541382538422545352539322538432545372542412542462545372541382538422f32382d2545352541342539412545372542412541372545392539382539462545352538382539372e6a7067)\n\n如何工作：\n\n- 设置了多个队列，赋予每个队列不同的优先级，每个队列优先级从高到低，同时优先级越高时间片越短；\n- 新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成；\n- 当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行；\n- `priority boost（优先级提升）`机制。ChatGPT【基本思想是周期性地提升处于低优先级队列中的进程的优先级。通过优先级提升机制，长时间等待的进程可以在一段时间后获得更高的优先级，这样它们有更大的机会被调度执行，从而减少等待时间并提高响应性。】也可以防止防止一直来新的任务让低优先级的长任务饿死。\n\n可以发现，对于短作业可能可以在第一级队列很快被处理完。对于长作业，如果在第一级队列处理不完，可以移入下次队列等待被执行，虽然等待的时间变长了，但是运行时间也变更长了，所以该算法**很好的兼顾了长短作业，同时有较好的响应时间**。\n"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}