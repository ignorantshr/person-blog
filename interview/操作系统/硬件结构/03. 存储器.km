{
    "root": {
        "data": {
            "id": "cva4wrvttdc0",
            "created": 1693830810106,
            "text": "存储器"
        },
        "children": [
            {
                "data": {
                    "id": "cva4x1fwuh40",
                    "created": 1693830830911,
                    "text": "存储器的层次结构",
                    "note": "存储器按照速度从快到慢通常可以分为这么几个级别：\n![](https://camo.githubusercontent.com/90a2aa715939bc993c29a15eb7a985201ce15a3fea9205616b1c866e87d622b7/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f7374322f2545362539332538442545342542442539432545372542332542422545372542422539462f2545352541442539382545352538322541382545372542422539332545362539452538342f2545352541442539382545352538322541382545352538432542412545352538382538362545372542412541372e706e67)"
                },
                "children": [
                    {
                        "data": {
                            "id": "cva4yp98n600",
                            "created": 1693830961115,
                            "text": "寄存器",
                            "note": "寄存器 是最靠近 CPU 的控制单元和逻辑计算单元的存储器。\n\n- 32 位 CPU 中大多数寄存器可以存储 4 个字节；\n- 64 位 CPU 中大多数寄存器可以存储 8 个字节。\n\n寄存器的访问速度非常快，一般要求在半个 CPU 时钟周期内完成读写。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cva505fop740",
                            "created": 1693831074697,
                            "text": "CPU Cache",
                            "note": "CPU Cache 用的是一种叫 **SRAM（Static Random-Access Memory，静态随机存储器）**的芯片。\n\n是因为只要有电，数据就可以保持存在，而一旦断电，数据就会丢失了。\n\n![](https://camo.githubusercontent.com/2fb7b5ea4a1da74c7cf1b44d3e8f855cc1acb7838043217bbac835d49c6d69f6/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f7374322f2545362539332538442545342542442539432545372542332542422545372542422539462f2545352541442539382545352538322541382545372542422539332545362539452538342f4350552d43616368652e706e67)\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cva51pt88uo0",
                                    "created": 1693831197416,
                                    "text": "L1 高速缓存",
                                    "note": "L1 高速缓存的访问速度通常只需要 `2~4 `个时钟周期，而大小在几十 KB 到几百 KB 不等。\n\n每个 CPU 核心都有一块属于自己的 L1 高速缓存，指令和数据在 L1 是分开存放的，所以 L1 高速缓存通常分成**指令缓存**和**数据缓存**。\n\n查看 CPU 里的 L1 Cache「数据」缓存的容量大小：\n```\n$ cat /sys/devices/system/cpu/cpu0/cache/index0/size\n32K\n```\n\n查看 L1 Cache「指令」缓存的容量大小：\n```\n$ cat /sys/devices/system/cpu/cpu0/cache/index1/size\n32K\n```"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cva52ukveh40",
                                    "created": 1693831286159,
                                    "text": "L2 高速缓存",
                                    "note": "L2 高速缓存同样每个 CPU 核心都有，但是 L2 高速缓存位置比 L1 高速缓存距离 CPU 核心 更远，它大小比 L1 高速缓存更大，CPU 型号不同大小也就不同，通常大小在几百 KB 到几 MB 不等，访问速度则更慢，速度在 `10~20` 个时钟周期。\n```\n$ cat /sys/devices/system/cpu/cpu0/cache/index2/size\n256K\n```"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cva53n79e7s0",
                                    "created": 1693831348462,
                                    "text": "L3 高速缓存",
                                    "note": "L3 高速缓存通常是多个 CPU 核心共用的，位置比 L2 高速缓存距离 CPU 核心 更远，大小也会更大些，通常大小在几 MB 到几十 MB 不等，具体值根据 CPU 型号而定。\n\n访问速度相对也比较慢一些，访问速度在 `20~60`个时钟周期。\n\n```\n$ cat /sys/devices/system/cpu/cpu0/cache/index3/size \n3072K\n```\n"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cva54f3zhb40",
                            "created": 1693831409214,
                            "text": "内存",
                            "note": "内存 使用的是一种叫作 **DRAM （Dynamic Random Access Memory，动态随机存取存储器）** 的芯片。\n\nDRAM 存储一个 bit 数据，只需要一个晶体管和一个电容就能存储，但是因为数据会被存储在电容里，电容会不断漏电，所以需要「定时刷新」电容，才能保证数据不会被丢失，这就是 DRAM 之所以被称为「动态」存储器的原因，只有不断刷新，数据才能被存储起来。\n\n内存速度大概在 `200~300` 个 时钟周期之间。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cva55wnd30g0",
                            "created": 1693831525755,
                            "text": "SSD/HDD 硬盘",
                            "note": "SSD（Solid-state disk）就是我们常说的固体硬盘，结构和内存类似，但是它相比内存的优点是断电后数据还是存在的，而内存、寄存器、高速缓存断电后数据都会丢失。内存的读写速度比 SSD 大概快 10~1000 倍。\n\n机械硬盘（Hard Disk Drive, HDD），它是通过物理读写的方式来访问数据的，因此它访问速度是非常慢的，它的速度比内存慢 10W 倍左右。"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cva58e3k8480",
                    "created": 1693831720469,
                    "text": "存储器的层次关系",
                    "note": "![](https://camo.githubusercontent.com/beb08bc709198f437f584aa606f5bcc9b371dc0ad2a8d4307b23faa80fa5860c/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f7374322f2545362539332538442545342542442539432545372542332542422545372542422539462f2545352541442539382545352538322541382545372542422539332545362539452538342f2545352541442539382545352538322541382545352539392541382545372539412538342545352542312538322545362541432541312545352538352542332545372542332542422545352539422542452e706e67)\n\n**每个存储器只和相邻的一层存储器设备打交道**。比如，CPU Cache 的数据是从内存加载过来的，写回数据的时候也只写回到内存，CPU Cache 不会直接把数据写到硬盘，也不会直接从硬盘加载数据，而是先加载到内存，再从内存加载到 CPU Cache 中。"
                },
                "children": []
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}