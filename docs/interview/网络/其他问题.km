{
    "root": {
        "data": {
            "id": "custeu9ythk0",
            "created": 1692071853287,
            "text": "问题"
        },
        "children": [
            {
                "data": {
                    "id": "custf5keuw00",
                    "created": 1692071877863,
                    "text": "键入网址到网页显示，期间发生了什么",
                    "note": "1. 浏览器解析 URL，生成HTTP消息\n1. DNS 查询IP地址\n1. 把 HTTP 的传输工作交给操作系统中的协议栈\n1. TCP 头部封装，头部包含两个端口\n1. IP 头部封装，头部包含两个IP地址\n1. MAC 头部封装，ARP 定位下一跳的 MAC 地址，\n1. 网卡封装。在开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列（FCS）\n1. 最后网卡会将包转为电信号，通过网线发送出去\n1. 交换机接收。电信号到达网线接口，交换机里的模块进行接收，接下来交换机里的模块将电信号转换为数字信号\n1. 交换机根据 MAC 地址表查找 MAC 地址，然后将信号发送到相应的端口。\n1. 路由器 接收。电信号到达网线接口部分，路由器中的模块会将电信号转成数字信号，然后通过包末尾的 FCS 进行错误校验。\n1. 路由器查询路由表，将信号发送到相应的端口\n1. 服务器收到数据包，层层校验去除头部字段转发给上层\n1. 服务器处理数据，发送响应包"
                },
                "children": [
                    {
                        "data": {
                            "id": "cuswvzbe5m80",
                            "created": 1692081659779,
                            "text": "交换机",
                            "note": "交换机的设计是将网络包原样转发到目的地。交换机工作在 MAC 层，也称为**二层网络设备。**\n\n首先，电信号到达网线接口，交换机里的模块进行接收，接下来交换机里的模块将电信号转换为数字信号。\n\n然后通过包末尾的 FCS 校验错误，如果没问题则放到缓冲区。这部分操作基本和计算机的网卡相同，但交换机的工作方式和网卡不同。\n\n计算机的网卡本身具有 MAC 地址，并通过核对收到的包的接收方 MAC 地址判断是不是发给自己的，如果不是发给自己的则丢弃；相对地，**交换机的端口不核对接收方 MAC 地址，而是直接接收所有的包并存放到缓冲区中**。因此，和网卡不同，**交换机的端口不具有 MAC 地址。**\n\n将包存入缓冲区后，接下来需要查询一下这个包的接收方 MAC 地址是否已经在 MAC 地址表中有记录了。\n\n交换机的 **MAC 地址表**主要包含了设备的 MAC 地址与该设备连接在交换机的哪个端口上的映射关系。\n\n如果地址表中找不到指定的 MAC 地址。这可能是因为具有该地址的设备还没有向交换机发送过包，或者这个设备一段时间没有工作导致地址被从地址表中删除了。\n\n这种情况下，交换机无法判断应该把包转发到哪个端口，只能**将包转发到除了源端口之外的所有端口上**，无论该设备连接在哪个端口上都能收到这个包。\n\n此外，如果接收方 MAC 地址是一个广播地址，那么交换机会将包发送到除源端口之外的所有端口。以下两个属于广播地址：\n\n- MAC 地址中的 `FF:FF:FF:FF:FF:FF`\n- IP 地址中的 `255.255.255.255`"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cusx09hr6k00",
                            "created": 1692081995387,
                            "text": "路由器",
                            "note": "路由器和交换机是有区别的：\n\n- 因为路由器是基于 IP 设计的，俗称三层网络设备，路由器的各个端口都具有 MAC 地址和 IP 地址；\n- 而交换机是基于以太网设计的，俗称二层网络设备，交换机的端口不具有 MAC 地址。\n\n\n路由器的端口具有 MAC 地址，因此它就能够成为以太网的发送方和接收方；同时还具有 IP 地址，从这个意义上来说，它和计算机的网卡是一样的。\n\n当转发包时，首先路由器端口会接收发给自己的以太网包，然后**路由表**查询转发目标，再由相应的端口作为发送方将以太网包发送出去。"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cusx18bhvko0",
                                    "created": 1692082071196,
                                    "text": "接收",
                                    "note": "首先，电信号到达网线接口部分，路由器中的模块会将电信号转成数字信号，然后通过包末尾的 FCS 进行错误校验。\n\n如果没问题则检查 MAC 头部中的接收方 MAC 地址，看看是不是发给自己的包，如果是就放到接收缓冲区中，否则就丢弃这个包。\n\n总的来说，路由器的端口都具有 MAC 地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cusx1y35c7k0",
                                    "created": 1692082127287,
                                    "text": "查询路由表确定输出端口",
                                    "note": "完成包接收操作之后，路由器就会**去掉包开头的 MAC 头部。**\n\nMAC 头部的作用就是将包送达路由器，其中的接收方 MAC 地址就是路由器端口的 MAC 地址。因此，当包到达路由器之后，MAC 头部的任务就完成了，于是 MAC 头部就会被丢弃。\n\n接下来，路由器会根据 MAC 头部后方的 IP 头部中的内容进行包的转发操作。\n\n![](https://camo.githubusercontent.com/7dc75d5df2665bbfcb7fc3dd7527052bc009adfee1f058524a7604048756dbee/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545382541452541312545372541452539372545362539432542412545372542442539312545372542422539432f2545392539342541452545352538352541352545372542442539312545352539442538302545382542462538372545372541382538422f32342e6a7067)\n\n路由表中如果有条目的子网掩码和目的IP地址与操作之后对应条目的目的地址匹配，则该条目记录就会被作为转发目标。\n\n找不到匹配路由时，就会选择**默认路由**，路由表中子网掩码为 `0.0.0.0` 的记录表示「默认路由」。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cusx5z8vlw80",
                                    "created": 1692082443267,
                                    "text": "发送",
                                    "note": "首先，需要根据路由表的网关列判断对方的地址:\n\n- 如果网关是一个 IP 地址，则这个 IP 地址就是我们要转发到的目标地址，**还未抵达终点，还需继续需要路由器转发**。\n- 如果网关为空，则 IP 头部中的接收方 IP 地址就是要转发到的目标地址，也是就终于**找到 IP 包头里的目标地址了，说明已抵达终点。**\n\n知道对方的 IP 地址之后，接下来需要通过 ARP 协议根据 IP 地址查询 MAC 地址，并将查询的结果作为**接收方 MAC 地址**。\n\n路由器也有 ARP 缓存，因此首先会在 ARP 缓存中查询，如果找不到则发送 ARP 查询请求。\n\n接下来是发送方 MAC 地址字段，这里填写**输出端口的 MAC 地址**。还有一个以太类型字段，填写 0800 （十六进制）表示 IP 协议。\n\n网络包完成后，接下来会将其转换成电信号并通过端口发送出去。"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cusxeakqw6g0",
                    "created": 1692083094843,
                    "text": "Linux 接收网络包的流程",
                    "note": "网卡是计算机里的一个硬件，专门负责接收和发送网络包，当网卡接收到一个网络包后，会通过 DMA 技术，将网络包写入到指定的内存地址，也就是写入到 Ring Buffer，这个是一个环形缓冲区，接着就会告诉操作系统这个网络包已经到达。\n\n所以为了解决频繁中断带来的性能开销，Linux 内核在 2.6 版本中引入了 **NAPI 机制**，它是混合「中断和轮询」的方式来接收网络包，它的核心概念就是**不采用中断的方式读取数据，而是首先采用中断唤醒数据接收的服务程序，然后 `poll `的方法来轮询数据。**\n\n因此，当有网络包到达时，会通过 DMA 技术，将网络包写入到指定的内存地址，接着网卡向 CPU 发起硬件中断，当 CPU 收到硬件中断请求后，根据中断表，调用已经注册的中断处理函数。\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cusxg3v7hy80",
                            "created": 1692083236966,
                            "text": "硬中断",
                            "note": "硬件中断处理函数会做如下的事情：\n\n1. 需要先「暂时屏蔽中断」，表示已经知道内存中有数据了，告诉网卡下次再收到数据包直接写内存就可以了，不要再通知 CPU 了，这样可以提高效率，避免 CPU 不停的被中断。\n1. 接着，发起「软中断」，然后恢复刚才屏蔽的中断。\n"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cusxgelk0480",
                            "created": 1692083260327,
                            "text": "软中断",
                            "note": "内核中的 ksoftirqd 线程专门负责软中断的处理，当 ksoftirqd 内核线程收到软中断后，就会来轮询处理数据。\n\nksoftirqd 线程会从 Ring Buffer 中获取一个数据帧，用 sk_buff 表示，从而可以作为一个网络包交给网络协议栈进行逐层处理。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cusxgwrs6io0",
                            "created": 1692083299886,
                            "text": "网络协议栈",
                            "note": "首先，会先进入到网络接口层，在这一层会检查报文的合法性，如果不合法则丢弃，合法则会找出该网络包的上层协议的类型，比如是 IPv4，还是 IPv6，接着再去掉帧头和帧尾，然后交给网络层。\n\n到了网络层，则取出 IP 包，判断网络包下一步的走向，比如是交给上层处理还是转发出去。当确认这个网络包要发送给本机后，就会从 IP 头里看看上一层协议的类型是 TCP 还是 UDP，接着去掉 IP 头，然后交给传输层。\n\n传输层取出 TCP 头或 UDP 头，根据四元组「源 IP、源端口、目的 IP、目的端口」作为标识，找出对应的 Socket，并把数据放到 Socket 的接收缓冲区。\n\n最后，应用层程序调用 Socket 接口，将内核的 Socket 接收缓冲区的数据「拷贝」到应用层的缓冲区，然后唤醒用户进程。"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cusxhdah8wg0",
                    "created": 1692083335845,
                    "text": "Linux 发送网络包的流程",
                    "note": "首先，应用程序会调用 Socket 发送数据包的接口，由于这个是系统调用，所以会从用户态陷入到内核态中的 Socket 层，内核会申请一个内核态的 sk_buff 内存，**将用户待发送的数据拷贝到 sk_buff 内存，并将其加入到发送缓冲区。**\n\n接下来，网络协议栈从 Socket 发送缓冲区中取出 sk_buff，并按照 TCP/IP 协议栈从上到下逐层处理。\n\n如果使用的是 TCP 传输协议发送数据，那么先**拷贝一个新的 sk_buff 副本** ，这是因为 sk_buff 后续在调用网络层，最后到达网卡发送完成的时候，这个 sk_buff 会被释放掉。而 TCP 协议是支持丢失重传的，在收到对方的 ACK 之前，这个 sk_buff 不能被删除。所以内核的做法就是每次调用网卡发送的时候，实际上传递出去的是 sk_buff 的一个拷贝，等收到 ACK 再真正删除。\n\n接着，对 sk_buff 填充 TCP 头。这里提一下，sk_buff 可以表示各个层的数据包，在应用层数据包叫 data，在 TCP 层我们称为 segment，在 IP 层我们叫 packet，在数据链路层称为 frame。\n\n为什么全部数据包只用一个结构体来描述呢？协议栈采用的是分层结构，上层向下层传递数据时需要增加包头，下层向上层数据时又需要去掉包头，如果每一层都用一个结构体，那在层之间传递数据的时候，就要发生多次拷贝，这将大大降低 CPU 效率。\n\n于是，为了在层级之间传递数据时，不发生拷贝，只用 sk_buff 一个结构体来描述所有的网络包，那它是如何做到的呢？是通过调整 sk_buff 中 `data` 的指针，比如：\n\n- 当接收报文时，从网卡驱动开始，通过协议栈层层往上传送数据报，通过增加 skb->data 的值，来逐步剥离协议首部。\n- 当要发送报文时，创建 sk_buff 结构体，数据缓存区的头部预留足够的空间，用来填充各层首部，在经过各下层协议时，通过减少 skb->data 的值来增加协议首部。\n\n![](https://camo.githubusercontent.com/a630843d52e1c898cf596588ad6053da5057dbb754181f12a91c71015e4bb32b/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f737434406d61696e2f2545362539332538442545342542442539432545372542332542422545372542422539462f2545352541342539412545382542372541462545352541342538442545372539342541382f736b5f627566662e6a7067)\n\n至此，传输层的工作也就都完成了。\n\n然后交给网络层，在网络层里会做这些工作：选取路由（确认下一跳的 IP）、填充 IP 头、netfilter 过滤、对超过 MTU 大小的数据包进行分片。处理完这些工作后会交给网络接口层处理。\n\n网络接口层会通过 ARP 协议获得下一跳的 MAC 地址，然后对 sk_buff 填充帧头和帧尾，接着将 sk_buff 放到网卡的发送队列中。\n\n这一些工作准备好后，会触发「软中断」告诉网卡驱动程序，这里有新的网络包需要发送，驱动程序会从发送队列中读取 sk_buff，将这个 sk_buff 挂到 RingBuffer 中，接着将 sk_buff 数据映射到网卡可访问的内存 DMA 区域，最后触发真实的发送。\n\n当数据发送完成以后，其实工作并没有结束，因为内存还没有清理。当发送完成的时候，网卡设备会触发一个硬中断来释放内存，主要是释放 sk_buff 内存和清理 RingBuffer 内存。\n\n最后，当收到这个 TCP 报文的 ACK 应答时，传输层就会释放原始的 sk_buff。"
                },
                "children": [
                    {
                        "data": {
                            "id": "cusxl8gncso0",
                            "created": 1692083638791,
                            "text": "发送网络数据的时候，涉及几次内存拷贝操作？",
                            "note": "第一次，调用发送数据的系统调用的时候，内核会申请一个内核态的 sk_buff 内存，将用户待发送的数据拷贝到 sk_buff 内存，并将其加入到发送缓冲区。\n\n第二次，在使用 TCP 传输协议的情况下，从传输层进入网络层的时候，每一个 sk_buff 都会被克隆一个新的副本出来。副本 sk_buff 会被送往网络层，等它发送完的时候就会释放掉，然后原始的 sk_buff 还保留在传输层，目的是为了实现 TCP 的可靠传输，等收到这个数据包的 ACK 时，才会释放原始的 sk_buff。\n\n第三次，当 IP 层发现 sk_buff 大于 MTU 时才需要进行。会再申请额外的 sk_buff，并将原来的 sk_buff 拷贝为多个小的 sk_buff。"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}