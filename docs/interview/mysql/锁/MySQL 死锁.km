{
    "root": {
        "data": {
            "id": "cv5ripf93ts0",
            "created": 1693386793396,
            "text": "MySQL 死锁"
        },
        "children": [
            {
                "data": {
                    "id": "cv5rjw5wa8w0",
                    "created": 1693386886432,
                    "text": "死锁的发生",
                    "note": "使用存储引擎 Innodb，隔离级别为可重复读（RR）。\n\n例：\n```sql\nCREATE TABLE `t_order` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `order_no` int DEFAULT NULL,\n  `create_date` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `index_order` (`order_no`) USING BTREE\n) ENGINE=InnoDB ;\n```\n\n表中已有的记录：\n![](https://camo.githubusercontent.com/ecc370ebfb262048b512afbbf7e8fe752b5cdf4e1786252f44b08e9011d6546b/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f696d675f636f6e766572742f35346663303066396638376136306162376235626139326438323461383932642e706e67)\n\n假设这时有两事务，一个事务要插入订单 1007，另外一个事务要插入订单 1008，因为需要对订单做幂等性校验，所以两个事务先要查询该订单是否存在，不存在才插入记录，过程如下：\n![](https://camo.githubusercontent.com/e394efa1965cd560d8f41455c3ee21e04b4553c279c9006b4ed8ef995cd430f1/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f696d675f636f6e766572742f39306331653031643033343564653633396533343236636561303339306538302e706e67)\n\n可以看到，两个事务都陷入了等待状态（前提没有打开死锁检测），也就是发生了死锁，因为都在相互等待对方释放锁。\n\n如果没有使用 select ... for update 语句，而使用了单纯的 select 语句，如果是两个订单号一样的请求同时进来，就会出现两个重复的订单，有可能出现幻读，如下图：\n![](https://camo.githubusercontent.com/91b8978835dab6e8109643c7770635f5115f22caa53d111db95c216bed8fb045/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f696d675f636f6e766572742f38616531386631306631613839616163356539336630653937393465343639652e706e67)"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cv5rqxc7blc0",
                    "created": 1693387437539,
                    "text": "为什么会产生死锁",
                    "note": "**普通的 select 语句是不会对记录加锁的，因为它是通过 MVCC 的机制实现的快照读**，如果要在查询时对记录加行锁，可以使用下面这两个方式：\n\n```sql\nbegin;\n//对读取的记录加共享锁\nselect ... lock in share mode;\ncommit; //锁释放\n\nbegin;\n//对读取的记录加排他锁\nselect ... for update;\ncommit; //锁释放\n```\n\n**行锁的释放时机是在事务提交（commit）后，锁就会被释放，并不是一条语句执行完就释放行锁**。\n\n事务 A 在二级索引（INDEX_NAME : index_order）上加的是 X 型的 `next-key 锁`，锁范围是(1006, +∞]：\n![](https://camo.githubusercontent.com/9ef5e8b2d01db67bc9eccca0a3507c518e7d47df266188248279cafd0bf00504/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f31636638363134656261336234356239383734646336323034623464306364312e706e67)\n\n当事务 B 往事务 A next-key 锁的范围 (1006, +∞] 里插入 id = 1008 的记录就会被锁住。\n\n因为当执行以上语句的时候，**间隙锁之间是兼容的，所以两个事务中的`select … for update`语句不会相互影响**。但在执行插入语句时，会在插入间隙上获取插入意向锁，而**插入意向锁和间隙锁是冲突的**，所以当其它事务持有该间隙的间隙锁时，需要等待其它事务释放间隙锁之后，才能获取到插入意向锁。\n\n此例中两个事务执行完 `select … for update` 之后都持有范围相同的 next-key lock，而接下来的插入操作为了获取插入意向锁，都在等待对方事务的间隙锁释放，于是就造成了死锁。\n"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cv5sbqcaz200",
                    "created": 1693389067956,
                    "text": "next-key lock 一定互斥吗",
                    "note": "next-key lock 是包含间隙锁 + 记录锁的，**如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的**。\n\n比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。\n\n这是因为虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系。X 型的记录锁与 X 型的记录锁是冲突的，比如一个事务执行了 `select ... where id = 1 for update`，后一个事务在执行这条语句的时候，就会被阻塞的。\n\n但是！对于这种范围为 `(1006, +∞]` 的 next-key lock，两个事务是可以同时持有的，不会冲突。因为 **+∞ 并不是一个真实的记录，自然就不需要考虑 X 型与 S 型关系**。"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cv5ry9yjc740",
                    "created": 1693388013560,
                    "text": "Insert 语句是怎么加行级锁的",
                    "note": "当事务需要加锁的时，如果这个锁不可能发生冲突，InnoDB 会跳过加锁环节，这种机制称为隐式锁。隐式锁是 InnoDB 实现的一种延迟加锁机制，其特点是只有在可能发生冲突时才加锁，从而减少了锁的数量，提高了系统整体性能。\n\nInsert 语句在正常执行时是不会生成锁结构的，它是靠聚簇索引记录自带的 `trx_id` 隐藏列来作为**隐式锁**来保护记录的。\n\n隐式锁就是在 Insert 过程中不加锁，只有在特殊情况下，才会将隐式锁转换为显式锁，这里我们列举两个场景。\n\n- 如果记录之间加有间隙锁，为了避免幻读，此时是不能插入记录的；\n- 如果 Insert 的记录和已有记录存在唯一键冲突，此时也不能插入记录；\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cv5sia6er5k0",
                            "created": 1693389581320,
                            "text": "记录之间加有间隙锁",
                            "note": "每插入一条新记录，都需要看一下待插入记录的下一条记录上是否已经被加了间隙锁，如果已加间隙锁，此时会生成一个插入意向锁，然后锁的状态设置为等待状态（PS：MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁），现象就是 Insert 语句会被阻塞。\n\n![](https://camo.githubusercontent.com/09ef699237d555dea1a67ff1cafe4939918c68251ac3dce4f336d32ba875ce5c/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f352545362539442541312545362539352542302545362538442541452e706e67)\n\n事务 A 执行：\n```sql\n# 事务 A\nmysql> begin;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> select * from t_order where order_no = 1006 for update;\nEmpty set (0.01 sec)\n```\n\n![](https://camo.githubusercontent.com/c2487acfb57f18e66d830318dee1324479d66d1fc9af032a18c59146cdb75c5c/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f254534254241253842254535253841254131412545392539372542342545392539412539392545392539342538312e706e67)\n\n可见，加的是 next-key 锁（记录锁 + 间隙锁），锁范围是（1005, +∞]。\n\n然后，有个事务 B 在这个间隙锁中，插入了一个记录，那么此时该事务 B 就会被阻塞：\n```sql\n# 事务 B 插入一条记录\nmysql> begin;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> insert into t_order(order_no, create_date) values(1010,now());\n### 阻塞状态。。。。\n```\n\n![](https://camo.githubusercontent.com/470de40d2cc57a8966d4182df62cbe6a48a858581a9f83f72f88a08d8873f84a/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f254534254241253842254535253841254131622545362538462539322545352538352541352545362538342538462545352539302539312545392539342538312e706e67)\n\n事务 B 生成了一个插入意向锁（`LOCK_MODE: X,INSERT_INTENTION`），状态为等待状态（`LOCK_STATUS: WAITING`）。\n锁的状态是等待状态，意味着事务 B 并没有成功获取到插入意向锁，因此事务 B 发生阻塞。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cv5tuc2zp2w0",
                            "created": 1693393346947,
                            "text": "遇到唯一键冲突",
                            "note": "如果在插入新记录时，插入了一个与「已有的记录的主键或者唯一二级索引列值相同」的记录（不过可以有多条记录的唯一二级索引列的值同时为 NULL，这里不考虑这种情况），此时插入就会失败，然后对于这条记录加上了 `S 型的锁`。\n\n- 如果主键索引重复，插入新记录的事务会给已存在的主键值重复的聚簇索引记录添加 **S 型记录锁**。\n- 如果唯一二级索引重复，插入新记录的事务都会给已存在的二级索引列值重复的二级索引记录添加 **S 型 next-key 锁**。"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cv5txcd8vlc0",
                                    "created": 1693393582659,
                                    "text": "主键索引冲突",
                                    "note": "![](https://camo.githubusercontent.com/8fb13f9bcb296ce2dbb5878ca06eea67efae64ad3914ce49c68f5496febfd68b/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f2545342542382542422545392539342541452545352538362542322545372541412538312e706e67)\n\n但是除了报错之外，还做一个很重要的事情，就是对 id 为 5 的这条记录加上了 S 型的记录锁：\n![](https://camo.githubusercontent.com/00283712269bddbe12794737d5cee0a1d1736203df04916b4f596b3400c83c92/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f2545342542382542422545392539342541452545352538362542322545372541412538312545392539342538312e706e67)"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cv5tzbz82jc0",
                                    "created": 1693393738540,
                                    "text": "唯一二级索引冲突",
                                    "note": "![](https://camo.githubusercontent.com/fbf47de48f6be7cec6699d96192cbc090f796baedbc24d8b5167664c7dc77cd4/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f2545362538462539322545352538352541352545352541342542312545382542342541352e706e67)\n\n但是除了报错之外，还做一个很重要的事情，就是对 order_no 值为 1001 这条记录加上了 S 型的 next-key 锁：\n![](https://camo.githubusercontent.com/232867342559b904934933f6509cf1c128ba40e86dff406ddcae4b6e000aa917/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f732545372542312542422545352539452538422545392539342538312e706e67)\n\nindex_order 二级索引加了 S 型的 next-key 锁，范围是 (-∞, 1001]。\n\n此时，事务 B 执行了 select * from t_order where order_no = 1001 for update; 就会阻塞，因为这条语句想加 X 型的锁，是与 S 型的锁是冲突的，所以就会被阻塞：\n![](https://camo.githubusercontent.com/6e27c313b409f2f4906c872504bcae3179cb89aea15a4846c7c43ce2a95dfa5b/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f2545352539342541462545342542382538302545372542342541322545352542432539352545352538362542322545372541412538312e64726177696f2e706e67)\n\n![](https://camo.githubusercontent.com/4b559c3e1ac36b54986d330a2054ab000dc5884799f38b9c32541d68ee1b7d3f/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f254534254241253842254535253841254131622545372541442538392545352542452538352545372538412542362545362538302538312e706e67)\n事务 B 的状态（LOCK_STATUS）是等待状态，加锁的类型 X 型的记录锁（LOCK_MODE: X,REC_NOT_GAP）。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cv5u2hx4fi00",
                                    "created": 1693393986566,
                                    "text": "两个事务执行了相同的 insert 语句",
                                    "note": "现在 t_order 表中，只有这些数据，order_no 为唯一二级索引：\n![](https://camo.githubusercontent.com/09ef699237d555dea1a67ff1cafe4939918c68251ac3dce4f336d32ba875ce5c/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f352545362539442541312545362539352542302545362538442541452e706e67)\n\n在隔离级别可重复读的情况下，开启两个事务，前后执行相同的 Insert 语句，此时事务 B 的 Insert 语句会发生阻塞：\n![](https://camo.githubusercontent.com/92541bf06e1edb71acc63c202306e4f25668826878a11555fe62ff248dba1a31/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f2545352539342541462545342542382538302545372542342541322545352542432539352545352538412541302545392539342538312e64726177696f2e706e67)\n\n两个事务的加锁过程：\n\n- 事务 A 先插入 order_no 为 1006 的记录，可以插入成功，**此时对应的唯一二级索引记录被「隐式锁」保护，此时还没有实际的锁结构**（执行完这里的时候，查 performance_schema.data_locks 信息，可以看到这条记录是没有加任何锁的）；\n- 接着，事务 B 也插入 order_no 为 1006 的记录，由于事务 A 已经插入 order_no 值为 1006 的记录，所以事务 B 在插入二级索引记录时会遇到重复的唯一二级索引列值，此时事务 B 想获取一个 S 型 next-key 锁，但是事务 A 并未提交，事务 A 插入的 order_no 值为 1006 的记录上的「隐式锁」会变「显示锁」且锁类型为 X 型的记录锁，所以事务 B 向获取 S 型 next-key 锁时会遇到锁冲突，事务 B 进入阻塞状态。\n\n事务 A 对 order_no 为 1006 记录加上了类型为 **X 型的记录锁**（注意，这个是在执行事务 B 之后才产生的锁，没执行事务 B 之前，该记录还是隐式锁）：\n![](https://camo.githubusercontent.com/765776593928278af0d1c92f1d29acea3cfe129e67388cb3ac5b91ac5a14e4e0/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f254534254241253842254535253841254131612545362539382542452545372541342542412545392539342538312e706e67)\n\n事务 B 想对 order_no 为 1006 的记录加 S 型的 next-key 锁，但是由于事务 A 在该记录上持有了 **X 型的记录锁**，这两个锁是冲突的，所以导致事务 B 处于等待状态：\n![](https://camo.githubusercontent.com/323c3252047f991f8be6846317f57303aafc0152e8c3fe54b7a650c7095e6e14/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545392539342538312f254534254241253842254535253841254131622545372541442538392545352542452538352e706e67)\n\n并发多个事务的时候，第一个事务插入的记录，并不会加锁，而是会用隐式锁保护唯一二级索引的记录。\n\n但是当第一个事务还未提交的时候，有其他事务插入了与第一个事务相同的记录，**第二个事务就会被阻塞，因为此时第一事务插入的记录中的隐式锁会变为显示锁且类型是 X 型的记录锁，而第二个事务是想对该记录加上 S 型的 next-key 锁**，X 型与 S 型的锁是冲突的，所以导致第二个事务会等待，直到第一个事务提交后，释放了锁。"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cv5uc0u0wg00",
                    "created": 1693394733015,
                    "text": "如何避免死锁",
                    "note": "死锁的四个必要条件：**互斥、占有且等待、不可强占用、循环等待**。只要系统发生死锁，这些条件必然成立，但是只要破坏任意一个条件就死锁就不会成立。\n\n在数据库层面，有两种策略通过「打破循环等待条件」来解除死锁状态：\n\n- **设置事务等待锁的超时时间**。当一个事务的等待时间超过该值后，就对这个事务进行回滚，于是锁就释放了，另一个事务就可以继续执行了。在 InnoDB 中，参数 `innodb_lock_wait_timeout` 是用来设置超时时间的，默认值时 50 秒。\n\n当发生超时后，就出现下面这个提示：\n![](https://camo.githubusercontent.com/5beb31938e1f861e9671709faf459315e797f079ebd91b8297cd103002085af7/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f696d675f636f6e766572742f63323936633138383966303130316433333536393933313162346566323061382e706e67)\n\n- **开启主动死锁检测**。主动死锁检测在发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 `innodb_deadlock_detect` 设置为 on，表示开启这个逻辑，默认就开启。\n\n当检测到死锁后，就会出现下面这个提示：\n![](https://camo.githubusercontent.com/9c341033f6a3c148701ab6fe283acf0d9fcfbfd3c17b6d7b618ce158ca7003f3/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f696d675f636f6e766572742f66333830656633353764303635343938643864353461643037663134356530392e706e67)\n"
                },
                "children": []
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}