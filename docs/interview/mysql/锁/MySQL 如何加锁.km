{
    "root": {
        "data": {
            "id": "cv4xkkajp4o0",
            "created": 1693302305659,
            "text": "MySQL 如何加锁",
            "note": "**加锁的对象是索引，加锁的基本单位是 next-key lock，next-key lock 是前开后闭区间，而间隙锁是前开后开区间**。\n\n锁退化原则：\n**在能使用记录锁或者间隙锁就能 *避免幻读* 现象的场景下，next-key lock 就会退化成退化成记录锁或间隙锁**。\n\nMySQL 如何加锁可分为五种情况进行讨论：\n\n- 唯一索引下的\n\t- 等值查询\n    - 范围查询\n- 非唯一索引的\n\t- 等值查询\n    - 范围查询\n- 没有使用索引查询的情况\n\n**如果是用二级索引（不管是不是非唯一索引，还是唯一索引）进行锁定读查询的时候，除了会对二级索引项加行级锁（如果是唯一索引的二级索引，加锁规则和主键索引的案例相同），而且还会对查询到的记录的主键索引项上加「记录锁」**。",
            "hyperlink": "https://xiaolincoding.com/mysql/lock/how_to_lock.html#%E4%BB%80%E4%B9%88-sql-%E8%AF%AD%E5%8F%A5%E4%BC%9A%E5%8A%A0%E8%A1%8C%E7%BA%A7%E9%94%81",
            "hyperlinkTitle": "MySQL 是怎么加锁的",
            "expandState": "expand"
        },
        "children": [
            {
                "data": {
                    "id": "cv4xnok3wfs0",
                    "created": 1693302550037,
                    "text": "什么 SQL 语句会加行级锁",
                    "note": "参考《MySQL 锁类型》-> 行级锁 小节。"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cv5pwbkwv0o0",
                    "created": 1693382218142,
                    "text": "阅读说明",
                    "note": "本文以这些缩写表示对应的概念：\n\n- ssr：supremum pseudo-record\n- nkl：next-key lock\n\n本文所述的例子没有很详细，详细的文章说明参考[小林 coding《MySQL 是怎么加锁的》](https://xiaolincoding.com/mysql/lock/how_to_lock.html)\n\n本文以下面这个表结构来进行实验说明：\n\n```sql\nCREATE TABLE `user` (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `name` varchar(30) COLLATE utf8mb4_unicode_ci NOT NULL,\n  `age` int NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `index_age` (`age`) USING BTREE\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n```\n\n其中，id 是主键索引（唯一索引），age 是普通索引（非唯一索引），name 是普通的列。\n\n表中的有这些行记录：\n![](https://camo.githubusercontent.com/bcc0a3f844073577cccd29e46dd2f0d9cf8d9a63dbfec138b0fa654e80ae754b/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f757365722e706e67)\n"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cv5nwj2w0uw0",
                    "created": 1693376592247,
                    "text": "唯一索引等值查询",
                    "note": "\n- 记录存在，该记录加 记录锁\n- 记录不存在，\n\t- **如果下一条记录是 ssr，则对 ssr 加 nkl**\n    - 如果下一条记录不是 ssr 而是用户记录，下一条记录加 间隙锁\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cv5q1pwelnc0",
                            "created": 1693382641133,
                            "text": "例1 记录存在的情况",
                            "note": "在该场景下，该记录的索引中的 next-key lock 会退化成记录锁的原因就是在唯一索引等值查询并且查询记录存在的场景下，仅靠记录锁也能避免幻读的问题。\n\n```sql\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where id = 1 for update;\n+----+--------+-----+\n| id | name   | age |\n+----+--------+-----+\n|  1 | 路飞   |  19 |\n+----+--------+-----+\n1 row in set (0.02 sec)\n```\n![](https://camo.githubusercontent.com/c4d1da53e1a89f8e632dd32269b2f6bbd9214bd259dba011ad581ed4b9fcf534/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545352539342541462545342542382538302545372542342541322545352542432539352545382541452542302545352542442539352545392539342538312e64726177696f2e706e67)\n因为事务 A 对 id = 1 的记录加了 X 型的记录锁，所以事务 B 在修改 id=1 的记录时会被阻塞，事务 C 在删除 id=1 的记录时也会被阻塞。\n"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cv5q7jkh2q00",
                            "created": 1693383097536,
                            "text": "加锁分析语句",
                            "note": "可以通过 `select * from performance_schema.data_locks\\G;` 这条语句，查看事务执行 SQL 过程中加了什么锁。\n![](https://camo.githubusercontent.com/f2efa7216f48f4bd1eaf513703d908adcb82ae37d3cd09bcdfd32c19bf206526/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f254534254241253842254535253841254131612545352538412541302545392539342538312545352538382538362545362539452539302e706e67)\n\n图中 LOCK_TYPE 中的 RECORD 表示行级锁，而不是记录锁的意思。\n\n通过 `LOCK_MODE` 可以确认是 next-key 锁，还是间隙锁，还是记录锁：\n\n- 如果 LOCK_MODE 为 `X`，说明是 next-key 锁；\n- 如果 LOCK_MODE 为 `X, REC_NOT_GAP`，说明是记录锁；\n- 如果 LOCK_MODE 为 `X, GAP`，说明是间隙锁；\n"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cv5q7ycu1w00",
                            "created": 1693383129725,
                            "text": "例2 记录不存在的情况",
                            "note": "```sql\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where id = 2 for update;\nEmpty set (0.03 sec)\n```\n![](https://camo.githubusercontent.com/4aa4488e26455f8a2c2c3822dca1333b1d3d07f2ec88a2140071aa23d9f8676b/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f25453425424125384225453525384125413161254535253838253836254536253945253930312e706e67)\n\n因此，此时事务 A 在 id = 5 记录的主键索引上加的是间隙锁，锁住的范围是 (1, 5)。\n\n![](https://camo.githubusercontent.com/11161a4da5a8edb3c40a5ff1fc9aa50563de923c4ddfa96696b104fd61b76ec8/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545352539342541462545342542382538302545372542342541322545352542432539352545392539372542342545392539412539392545392539342538312e64726177696f2e706e67)\n\n接下来，如果有其他事务插入 id 值为 2、3、4 这一些记录的话，这些插入语句都会发生**阻塞**。\n\n注意，如果其他事务插入的 id = 1 或者 id = 5 的记录话，并不会发生阻塞，而是报**主键冲突**的错误，因为表中已经存在 id = 1 和 id = 5 的记录了。"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cv5o4i4tcps0",
                    "created": 1693377217100,
                    "text": "唯一索引范围查询",
                    "note": "查询条件：\n\n- 大于的情况\n\t- 记录存在\n\t- 记录不存在\n所有满足条件的记录都加 next-key lock，还有一个最后记录这个特殊的记录也是 next-key lock\n\n- 大于等于的情况，\n\t- 记录存在，等值记录（也就是第一个记录）加记录锁，其它满足条件的记录和 ssr 加 nkl\n\t- 记录不存在，所有满足条件的记录和 ssr 加 nkl\n\n- 小于的情况\n\t- 记录存在，满足条件的记录都加 nkl，下一条记录（也即是等值记录）加 间隙锁\n\t- 记录不存在，满足条件的记录都加 nk，下一条记录加 间隙锁\n\n- 小于等于的情况，\n\t- 记录存在，满足条件的记录都加 nkl，**下一条记录不必加锁**\n\t- 记录不存在，满足条件的记录加 nkl，下一条记录加 间隙锁\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cv5qergrzt40",
                            "created": 1693383663275,
                            "text": "例1 针对「大于」的范围查询的情况",
                            "note": "```sql\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where id > 15 for update;\n+----+-----------+-----+\n| id | name      | age |\n+----+-----------+-----+\n| 20 | 香克斯    |  39 |\n+----+-----------+-----+\n1 row in set (0.01 sec)\n```\n\n事务 A 加锁变化过程如下：\n\n1. 最开始要找的第一行是 id = 20，由于查询该记录不是一个等值查询（不是大于等于条件查询），所以对该主键索引加的是范围为 (15, 20] 的 next-key 锁；\n2. 由于是范围查找，就会继续往后找存在的记录，虽然我们看见表中最后一条记录是 id = 20 的记录，但是实际在 Innodb 存储引擎中，会用一个特殊的记录来标识最后一条记录，该特殊的记录的名字叫 `supremum pseudo-record`，所以扫描第二行的时候，也就扫描到了这个特殊记录的时候，会对该主键索引加的是范围为 `(20, +∞]` 的 next-key 锁。\n3. 停止扫描。\n\n![](https://camo.githubusercontent.com/81b1c846ce8c6edfe5cc3b1f579ca50b1b5fdee76e0fbc97534e07e9fd936425/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f25453525393425414625453425423825383025453725423425413225453525424325393525453825384325383325453525394225423425453625394625413525453825414625413225453525413425413725453425424125384531352e64726177696f2e706e67)\n\n![](https://camo.githubusercontent.com/01b8bf05e41d27c1d162d36b0252dc7666559014e1198a9d9ef4076bb3630759/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545382538432538332545352539422542342545362539462541352545382541462541322545352541342541372545342542412538452e706e67)"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cv5qh63yqk80",
                            "created": 1693383851881,
                            "text": "例2 针对「大于等于」的范围查询的情况",
                            "note": "```sql\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where id >= 15 for update;\n+----+-----------+-----+\n| id | name      | age |\n+----+-----------+-----+\n| 15 | 乌索普    |  20 |\n| 20 | 香克斯    |  39 |\n+----+-----------+-----+\n2 rows in set (0.00 sec)\n```\n\n![](https://camo.githubusercontent.com/44152358bacbf642493917cda7cde5336c317aaf5165577373c54d40b447b099/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f25453525393425414625453425423825383025453725423425413225453525424325393525453825384325383325453525394225423425453625394625413525453825414625413225453525413425413725453425424125384525453725414425383925453425424125384531352e64726177696f2e706e67)\n\n![](https://camo.githubusercontent.com/c11e9a553c095bc27545c52e81a0fb5ff2f7df1672652f6dd477f45b1b14ffa5/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545382538432538332545352539422542342545362539462541352545382541462541322545352541342541372545342542412538452545372541442538392545342542412538452e706e67)"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cv5qkm2mo8w0",
                            "created": 1693384121721,
                            "text": "例3 针对「小于」的范围查询时，查询条件值的记录「不存在」表中的情况",
                            "note": "```sql\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where id < 6 for update;\n+----+--------+-----+\n| id | name   | age |\n+----+--------+-----+\n|  1 | 路飞   |  19 |\n|  5 | 索隆   |  21 |\n+----+--------+-----+\n3 rows in set (0.00 sec)\n```\n![](https://camo.githubusercontent.com/54b037e63fb2e6307b0e57e9d94bbd563e03a2bf418a4b6f662515c973259b53/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f254535253934254146254534254238253830254537254234254132254535254243253935254538253843253833254535253942254234254536253946254135254538254146254132254535254230253846254534254241253845254537254144253839254534254241253845362e64726177696f2e706e67)\n\n![](https://camo.githubusercontent.com/eb2d68acd41f5ab043f1d26932fd032bfe5df46eb70ae9cfffd7718b8254cb75/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f254535253934254146254534254238253830254537254234254132254535254243253935254538253843253833254535253942254234254536253946254135254538254146254132254535254230253846254534254241253845362e706e67)"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cv5qm2lenmw0",
                            "created": 1693384236049,
                            "text": "例4 针对「小于等于」的范围查询时，查询条件值的记录「存在」表中的情况",
                            "note": "```sql\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where id <= 5 for update;\n+----+--------+-----+\n| id | name   | age |\n+----+--------+-----+\n|  1 | 路飞   |  19 |\n|  5 | 索隆   |  21 |\n+----+--------+-----+\n2 rows in set (0.00 sec)\n```\n\n![](https://camo.githubusercontent.com/b81faa6f1095f95385e2e07b66ba99b147b556472d73984de91d01c4af6e6f57/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f254535253934254146254534254238253830254537254234254132254535254243253935254538253843253833254535253942254234254536253946254135254538254146254132254535254230253846254534254241253845254537254144253839254534254241253845352e64726177696f2e706e67)\n\n![](https://camo.githubusercontent.com/ef1632bcdf7550ca28a788081cd3c1c3e80015251b138a6e35a2bce42783efd2/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545382538432538332545352539422542342545362539462541352545382541462541322545352542302538462545342542412538452545372541442538392545342542412538452e706e67)"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cv5qmt129ig0",
                            "created": 1693384293593,
                            "text": "例5 针对「小于」的范围查询时，查询条件值的记录「存在」表中的情况。",
                            "note": "```sql\nselect * from user where id < 5 for update;\n```\n\n![](https://camo.githubusercontent.com/fce54b0c1b6c2e9b2f01b97f608b866eb49c25ae263074ab34bdf45befc7f558/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f254535253934254146254534254238253830254537254234254132254535254243253935254538253843253833254535253942254234254536253946254135254538254146254132254535254230253846254534254241253845352e64726177696f2e706e67)\n\n![](https://camo.githubusercontent.com/4104b941f663957c8ad3e450163c9584b42dd60f769fa1cbb62fbf0acfbf70fd/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545352539342541462545342542382538302545372542342541322545352542432539352545382538432538332545352539422542342545362539462541352545382541462541322545352542302538462545342542412538452e706e67)"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cv5nwj2w0uw0",
                    "created": 1693376592247,
                    "text": "非唯一索引等值查询",
                    "note": "非唯一索引除了在二级索引上加锁，还需要在主键索引（聚簇索引）上面加锁。**对主键索引加锁的时候，只有满足查询条件的记录才会对它们的主键索引加锁**。\n\n- 记录存在，满足条件的记录加 nkl，对应的聚餐索引加 记录锁，二级索引的下一条记录加间隙锁\n- 记录不存在，二级索引的下一条记录加 间隙锁，聚餐索引不加锁\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cv5qoeihy740",
                            "created": 1693384418723,
                            "text": "例1 针对非唯一索引等值查询时，查询的值不存在的情况",
                            "note": "```SQL\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where age = 25 for update;\nEmpty set (0.00 sec)\n```\n\n![](https://camo.githubusercontent.com/137ff22da692ca618806022f27e90778aa67cbeb68817b896930a575dbe4dfce/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545392539442539452545352539342541462545342542382538302545372542342541322545352542432539352545372541442538392545352538302542432545362539462541352545382541462541326167653d32352e64726177696f2e706e67)\n\n![](https://camo.githubusercontent.com/9c840f2a631c22309fc918c5ca998f876650133d822ca6fcee0cd6b57f98ae36/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545392539442539452545352539342541462545342542382538302545372542342541322545352542432539352545372541442538392545352538302542432545362539462541352545382541462541326167653d32352e706e67)\n\n此时，如果有其他事务插入了 age 值为 23、24、25、26、……、38 这些新记录，那么这些插入语句都会发生阻塞。但是对于 `age = 22` 和 `age = 39` 这些边界条件需要分情况讨论。\n\n**插入语句在插入一条记录之前，需要先定位到该记录在 B+树 的位置，如果插入的位置的下一条记录的索引上有间隙锁，才会发生阻塞**。\n\n**二级索引树是按照二级索引值按顺序存放的，在相同的二级索引值情况下，再按主键 id 的顺序存放**。知道了这个前提，我们才能知道执行插入语句的时候，插入的位置的下一条记录是谁。\n\n插入 `age = 22` 记录的成功和失败的情况分别如下：\n\n- 当其他事务插入一条 `age = 22，id = 3` 的记录的时候，在二级索引树上定位到插入的位置，而该位置的下一条是 **id = 10、age = 22 的记录，该记录的二级索引上没有间隙锁，所以这条插入语句可以执行成功**。\n- 当其他事务插入一条 `age = 22，id = 12` 的记录的时候，在二级索引树上定位到插入的位置，而该位置的下一条是 **id = 20、age = 39 的记录，正好该记录的二级索引上有间隙锁，所以这条插入语句会被阻塞，无法插入成功**。\n\n插入 `age = 39` 记录的成功和失败的情况分别如下：\n\n- 当其他事务插入一条 `age = 39，id = 3` 的记录的时候，在二级索引树上定位到插入的位置，而该位置的下一条是 **id = 20、age = 39 的记录，正好该记录的二级索引上有间隙锁，所以这条插入语句会被阻塞，无法插入成功**。\n- 当其他事务插入一条 `age = 39，id = 21` 的记录的时候，在二级索引树上定位到插入的位置，而该位置的**下一条记录不存在，也就没有间隙锁了，所以这条插入语句可以插入成功**。\n\n分析输出结果：\n![](https://camo.githubusercontent.com/ea7ab3401e1730f20d594e8bbeebf641e896a3bace91ea50c6d8b1dbeb9d780b/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545392539442539452545352539342541462545342542382538302545372542342541322545352542432539352545372541442538392545352538302542432545362539462541352545382541462541326167653d32355f312e706e67)\n- LOCK_DATA 第一个数值，也就是 39，它代表的是 age 值。从前面我们也知道了，LOCK_DATA 第一个数值是 **next-key 锁和间隙锁锁住的范围的右边界值**。\n- LOCK_DATA 第二个数值，也就是 20，它代表的是 id 值。\n\n因此， `LOCK_DATA：39，20` + `LOCK_MODE : X, GAP` 的意思是，事务 A 在 age = 39 记录的二级索引上（INDEX_NAME: index_age），加了 age 值范围为 (22, 39) 的 X 型间隙锁，**同时针对其他事务插入 age 值为 39 的新记录时，不允许插入的新记录的 id 值小于 20**。如果插入的新记录的 id 值大于 20，则可以插入成功。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cv5qwkyidmo0",
                            "created": 1693385059665,
                            "text": "例2 针对非唯一索引等值查询时，查询的值存在的情况",
                            "note": "```SQL\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where age = 22 for update;\n+----+--------+-----+\n| id | name   | age |\n+----+--------+-----+\n| 10 | 山治   |  22 |\n+----+--------+-----+\n1 row in set (0.00 sec)\n```\n\n![](https://camo.githubusercontent.com/68017c433aa674a4ffbace526900a963f90978857d64ff72f4677582041d023d/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545392539442539452545352539342541462545342542382538302545372542342541322545352542432539352545372541442538392545352538302542432545362539462541352545382541462541322545352541442539382545352539432541382e64726177696f2e706e67)\n\n![](https://camo.githubusercontent.com/a5dc10485d9fbb21061ea289e299344b4a6a0c6f5a8e82b70646b20cc9fbeafc/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f2545392539442539452545352539342541462545342542382538302545372542342541322545352542432539352545372541442538392545352538302542432545362539462541352545382541462541322545462542432538382545352541442539382545352539432541382545462542432538392e706e67)\n\n在 age = 22 这条记录的二级索引上，加了范围为 (21, 22] 的 next-key 锁，意味着其他事务无法更新或者删除 age = 22 的这一些新记录，针对是否可以插入 age = 21 和 age = 22 的新记录，分析如下：\n\n  - 是否可以插入 age = 21 的新记录，还要看插入的新记录的 id 值，**如果插入 age = 21 新记录的 id 值小于 5，那么就可以插入成功**，因为此时插入的位置的下一条记录是 id = 5，age = 21 的记录，该记录的二级索引上没有间隙锁。**如果插入 age = 21 新记录的 id 值大于 5，那么就无法插入成功**，因为此时插入的位置的下一条记录是 id = 20，age = 39 的记录，该记录的二级索引上有间隙锁。\n  - 是否可以插入 age = 22 的新记录，还要看插入的新记录的 id 值，从 LOCK_DATA : 22, 10 可以得知，其他事务插入 age 值为 22 的新记录时，**如果插入的新记录的 id 值小于 10，那么插入语句会发生阻塞；如果插入的新记录的 id 大于 10，还要看该新记录插入的位置的下一条记录是否有间隙锁，如果没有间隙锁则可以插入成功，如果有间隙锁，则无法插入成功**。\n\n在 age = 39 这条记录的二级索引上，加了范围 (22, 39) 的间隙锁。意味着其他事务无法插入 age 值为 23、24、…… 、38 的这一些新记录，针对是否可以插入 age = 22 和 age = 39 的新记录，分析如下：\n\n  - 是否可以插入 age = 22 的新记录，还要看插入的新记录的 id 值，**如果插入 age = 22 新记录的 id 值小于 10，那么插入语句会被阻塞**，无法插入，因为此时插入的位置的下一条记录是 id = 10，age = 22 的记录，该记录的二级索引上有间隙锁（age = 22 这条记录的二级索引上有 next-key 锁）。**如果插入 age = 21 新记录的 id 值大于 10，也无法插入**，因为此时插入的位置的下一条记录是 id = 20，age = 39 的记录，该记录的二级索引上有间隙锁。\n  - 是否可以插入 age = 39 的新记录，还要看插入的新记录的 id 值，从 LOCK_DATA : 39, 20 可以得知，其他事务**插入 age 值为 39 的新记录时，如果插入的新记录的 id 值小于 20，那么插入语句会发生阻塞，如果插入的新记录的 id 大于 20，则可以插入成功**。\n"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cv5o4i4tcps0",
                    "created": 1693377217100,
                    "text": "非唯一索引范围查询",
                    "note": "非唯一索引范围查询，索引的 next-key lock 不会有退化为间隙锁和记录锁的情况，也就是**非唯一索引进行范围查询时，对二级索引记录加锁都是加 next-key 锁**。\n\n因为 age 字段是非唯一索引，不具有唯一性，所以如果只加记录锁（记录锁无法防止插入，只能防止删除或者修改），就会导致其他事务插入一条 age = 22 的记录，这样前后两次查询的结果集就不相同了，出现了幻读现象。\n\n查询条件：\n\n- 大于的情况\n\t- 记录存在\n\t- 记录不存在\n所有满足条件的记录和 ssr 加 nkl，对应的聚簇索引加 记录锁\n\n- 大于等于的情况\n\t- 记录存在\n\t- 记录不存在\n所有满足条件的记录和 ssr 加 nkl，对应的聚簇索引加 记录锁\n\nTODO，小于或等于时 二级索引的下一条记录是否会加锁\n\n- 小于的情况\n\t- 记录存在\n\t- 记录不存在\n所有满足条件的记录加 nkl，对应的聚簇索引加 记录锁，二级索引的下一条记录加 nkl\n\n- 小于等于的情况\n\t- 记录存在，所有满足条件的记录加 nkl，对应的聚簇索引加 记录锁，二级索引的下一条记录加 nkl\n\t- 记录不存在，所有满足条件的记录加 nkl，对应的聚簇索引加 记录锁，二级索引的下一条记录加 nkl\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cv5r1jj7q0w0",
                            "created": 1693385448384,
                            "text": "例2 针对「大于等于」的范围查询情况",
                            "note": "```sql\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from user where age >= 22  for update;\n+----+-----------+-----+\n| id | name      | age |\n+----+-----------+-----+\n| 10 | 山治      |  22 |\n| 20 | 香克斯    |  39 |\n+----+-----------+-----+\n2 rows in set (0.01 sec)\n```\n\n![](https://camo.githubusercontent.com/9f966e8594aecca91642b10db81f9bb9880160b4af82ed4842db7c0163a0978a/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f6d7973716c2f2545382541312538432545372542412541372545392539342538312f25453925394425394525453525393425414625453425423825383025453725423425413225453525424325393525453825384325383325453525394225423425453625394625413525453825414625413261676525453525413425413725453425424125384525453725414425383925453425424125384532322e64726177696f2e706e67)"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cv5rhqdfou00",
                    "created": 1693386717099,
                    "text": "TODO 能否删掉间隙锁所在的记录"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cv5ouafavp40",
                    "created": 1693379237788,
                    "text": "没有使用索引的情况",
                    "note": "如果*锁定读*查询语句，没有使用索引列作为查询条件，或者*锁定读*查询语句没有走索引查询，导致扫描是全表扫描。那么，**每一条记录的索引上都会加 next-key 锁，这样就相当于锁住了全表，这时如果其他事务对该表进行增、删、改操作的时候，都会被阻塞**。\n\nupdate 和 delete 语句 同理。\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cv5r9qljtuo0",
                            "created": 1693386090676,
                            "text": "update 语句的 where 带上索引就能避免全表记录加锁了吗",
                            "note": "并不是，关键还得看这条语句在执行过程中，优化器最终选择的是索引扫描，还是全表扫描，如果走了全表扫描，就会对全表的记录加锁了。\n\n如何避免：\n将 MySQL 里的 `sql_safe_updates` 参数设置为 1（默认是0），开启安全更新模式。\n\n此时 update 语句必须满足如下条件之一才能执行成功：\n\n- 使用 where，并且 where 条件中必须有索引列；\n- 使用 limit；\n- 同时使用 where 和 limit，此时 where 条件中可以没有索引列；\n\ndelete 语句必须满足以下条件能执行成功：\n\n- 同时使用 where 和 limit，此时 where 条件中可以没有索引列；\n\n如果 where 条件带上了索引列，但是优化器最终扫描选择的是全表，而不是索引的话，我们可以使用 `force index([index_name])` 可以告诉优化器使用哪个索引，以此避免有几率锁全表带来的隐患。"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}