{
    "root": {
        "data": {
            "id": "cvayrc6eg200",
            "created": 1693915017393,
            "text": "Linux 内核 vs Windows 内核"
        },
        "children": [
            {
                "data": {
                    "id": "cvayrw8w7p40",
                    "created": 1693915061079,
                    "text": "内核",
                    "note": "计算机是由各种外部硬件设备组成的，比如内存、cpu、硬盘等，如果每个应用都要和这些硬件设备对接通信协议，那这样太累了，所以这个中间人就由内核来负责，让**内核作为应用连接硬件设备的桥梁**，应用程序只需关心与内核交互，不用关心硬件的细节。\n![](https://camo.githubusercontent.com/cc34a62de364f9304f9c6f4b79ff6af10094df1b475734ec0bcfe0cabf21c003/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7869616f6c696e636f6465722f496d616765486f737434406d61696e2f2545362539332538442545342542442539432545372542332542422545372542422539462f2545352538362538352545362541302542382f4b65726e656c5f4c61796f75742e706e67)\n\n现代操作系统，内核一般会提供 4 个基本能力：\n\n- 管理进程、线程，决定哪个进程、线程使用 CPU，也就是**进程调度**的能力；\n- 管理内存，决定内存的分配和回收，也就是**内存管理**的能力；\n- 管理硬件设备，为进程与硬件设备之间提供通信能力，也就是**硬件通信**能力；\n- **提供系统调用**，如果应用程序要运行更高权限运行的服务，那么就需要有系统调用，它是用户程序与操作系统之间的接口。\n\n大多数操作系统，把内存分成了两个区域：\n\n- 内核空间，这个内存空间只有内核程序可以访问；\n- 用户空间，这个内存空间专门给应用程序使用；\n\n用户空间的代码只能访问一个局部的内存空间，而内核空间的代码可以访问所有内存空间。因此，当程序使用用户空间时，我们常说该程序在用户态执行，而当程序使内核空间时，程序则在内核态执行。\n\n内核程序执行在内核态，用户程序执行在用户态。当应用程序使用系统调用时，会产生一个中断。发生中断后，CPU 会中断当前在执行的用户程序，转而跳转到中断处理程序，也就是开始执行内核程序。内核处理完后，主动触发中断，把 CPU 执行权限交回给用户程序，回到用户态继续工作。"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cvayznwmkg80",
                    "created": 1693915669837,
                    "text": "Linux 的设计",
                    "note": "Linux 内核设计的理念主要有这几个点：\n\n- MultiTask，多任务。\n多任务意味着可以有多个任务同时执行，这里的「同时」可以是并发或并行：\n\n  - 对于单核 CPU 时，可以让每个任务执行一小段时间，时间到就切换另外一个任务，从宏观角度看，一段时间内执行了多个任务，这被称为并发。\n  - 对于多核 CPU 时，多个任务可以同时被不同核心的 CPU 同时执行，这被称为并行。\n- SMP，对称多处理。\n代表着每个 CPU 的地位是相等的，对资源的使用权限也是相同的，多个 CPU 共享同一个内存，每个 CPU 都可以访问完整的内存和硬件资源。这个特点决定了 Linux 操作系统不会有某个 CPU 单独服务应用程序或内核程序，而是每个程序都可以被分配到任意一个 CPU 上被执行。\n- ELF，可执行文件链接格式。\n是 Linux 操作系统中可执行文件的存储格式。\n- Monolithic Kernel，宏内核"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cvayvxc2zq00",
                    "created": 1693915376906,
                    "text": "内核类型",
                    "note": "**宏内核** Monolithic Kernel ：内核是一个完整的可执行程序，且拥有最高的权限。\n\n宏内核的特征是系统内核的所有模块，比如进程调度、内存管理、文件系统、设备驱动等，都运行在内核态。\n\n不过，Linux 也实现了动态加载内核模块的功能，例如大部分设备驱动是以可加载模块的形式存在的，与内核其他模块解耦。\n\n与宏内核相反的是微内核，微内核架构的内核只保留最基本的能力，比如进程调度、虚拟机内存、中断等，把一些应用放到了用户空间，比如驱动程序、文件系统等。这样服务与服务之间是隔离的，单个服务出现故障或者完全攻击，也不会导致整个操作系统挂掉，提高了操作系统的稳定性和可靠性。\n\n**微内核**内核功能少，可移植性高，相比宏内核有一点不好的地方在于，由于驱动程序不在内核中，而且驱动程序一般会频繁调用底层能力的，于是驱动和硬件设备交互就需要频繁切换到内核态，这样会带来性能损耗。\n\n还有一种内核叫**混合类型内核**，它的架构有点像微内核，内核里面会有一个最小版本的内核，然后其他模块会在这个基础上搭建，然后实现的时候会跟宏内核类似，也就是把整个内核做成一个完整的程序，大部分服务都在内核中，这就像是宏内核的方式包裹着一个微内核。\n\n![](https://camo.githubusercontent.com/29cf7bdaaa70b298ac08f94f2327afab3c3ee9c3fb878331ec4288d2e60d9f8c/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7869616f6c696e636f6465722f496d616765486f737434406d61696e2f2545362539332538442545342542442539432545372542332542422545372542422539462f2545352538362538352545362541302542382f4f532d737472756374757265322e706e67)"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cvaz1px1vvk0",
                    "created": 1693915830945,
                    "text": "Windows 设计",
                    "note": "当今 Windows 7、Windows 10 使用的内核叫 Windows NT，NT 全称叫 New Technology。\n\n下图是 Windows NT 的结构图片：\n![](https://camo.githubusercontent.com/6bc7453609f236f5eabb051666ffc2d27664ea8fbbf41d1da17aaf5d2a43ea4d/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7869616f6c696e636f6465722f496d616765486f737434406d61696e2f2545362539332538442545342542442539432545372542332542422545372542422539462f2545352538362538352545362541302542382f77696e646f774e542e706e67)\n\nWindows 和 Linux 一样，同样支持 MutiTask 和 SMP，但不同的是，Window 的内核设计是混合型内核，在上图你可以看到内核中有一个 MicroKernel 模块，这个就是最小版本的内核，而整个内核实现是一个完整的程序，含有非常多模块。\n\nWindows 的可执行文件格式叫 PE，称为可移植执行文件，扩展名通常是`.exe`、`.dll`、`.sys`等。"
                },
                "children": []
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}