{
    "root": {
        "data": {
            "id": "cvaz4mox8g00",
            "created": 1693916059015,
            "text": "虚拟内存",
            "hyperlink": "https://xiaolincoding.com/os/3_memory/vmem.html",
            "hyperlinkTitle": "小林coding"
        },
        "children": [
            {
                "data": {
                    "id": "cvaz4xi9jio0",
                    "created": 1693916082557,
                    "text": "虚拟内存",
                    "note": "我们可以把进程所使用的地址**隔离**开来，即让操作系统为每个进程分配独立的一套**虚拟地址**。\n\n**操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来**。\n\n- 程序所使用的内存地址叫做**虚拟内存地址（Virtual Memory Address）**\n- 实际存在硬件里面的空间地址叫**物理内存地址（Physical Memory Address）**。\n\n操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存，如下图所示：\n![](https://camo.githubusercontent.com/47e668d7a49fdadefafb9748d5ee814c74559a508c1f7a33fd6013c3a235f58d/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f37326162373662613639376534373062386365623134643566633536383864392e706e67)"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvd7w1nw0g80",
                            "created": 1694143896229,
                            "text": "虚拟内存的作用",
                            "note": "1. 虚拟内存可以使得进程对运行内存超过物理内存大小，因为程序运行符合局部性原理，对于那些没有被经常使用到的内存，我们可以把它换出到物理内存之外，比如硬盘上的 swap 区域。\n2. 由于每个进程都有自己的页表，所以每个进程的虚拟内存空间就是相互独立的。进程也没有办法访问其他进程的页表，所以这些页表是私有的，这就解决了多进程之间地址冲突的问题。\n3. 页表里的页表项中除了物理地址之外，还有一些标记属性的比特，比如控制一个页的读写权限，标记该页是否存在等。在内存访问方面，操作系统提供了更好的安全性。"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cvaz8on4t2g0",
                    "created": 1693916376717,
                    "text": "内存管理",
                    "note": "额外可以参考的文章：\n- [【操作系统】总结三（内存管理）](https://www.cnblogs.com/peterYong/p/6556619.html)"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvaz8sto0a80",
                            "created": 1693916385819,
                            "text": "内存分段",
                            "note": "虚拟地址=段选择因子+段内偏移量\n段选择因子=段号+特权\n段号对应段表\n段表里面有 段内描述符=段基址+段界限\n段基址+段内偏移量=物理内存地址\n\n分段机制下的虚拟地址由两部分组成，段选择因子和段内偏移量。\n![](https://camo.githubusercontent.com/143888df2efd78708a2150ae02a444b0bcd9800dbc3db3e3aa540fe23ddc6d65/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f61396564393739653265643834313466393832383736373539326161646332312e706e67)\n\n- \t**段选择因子**就保存在**段寄存器**里面。段选择因子里面最重要的是**段号**，用作**段表**的索引。每个段在段表中有一个**段内描述符**，通过段号索引到这个段内描述符，段内描述符里面保存的是这个**段的基地址、段的界限和特权等级**等。\n- 虚拟地址中的**段内偏移量**应该位于 0 和**段界限**之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。\n\n段式内存管理的优点（ChatGPT）：将内存划分为逻辑上独立的段，方便管理和保护不同类型的数据，提供更好的内存保护机制。每个段可以具有不同的属性，如只读、可写、可执行等。\n\n不足之处：\n\n- 第一个就是内存碎片的问题。\n- 第二个就是内存交换的效率低的问题。"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvazig4cipc0",
                                    "created": 1693917141809,
                                    "text": "内存碎片",
                                    "note": "![](https://camo.githubusercontent.com/b42818f152c20e23c38321c98794927a80ce22903fb5137ec8d0596bcc147638/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36313432626333633931376534613632393862646236323933366530643333322e706e67)\n\n内存碎片主要分为，内部内存碎片和外部内存碎片。\n\n- 内存分段管理可以做到段根据实际需求分配内存，所以有多少需求就分配多大的段，所以**不会出现内部内存碎片**。\n- 但是由于每个段的长度不固定，所以多个段未必能恰好使用所有的内存空间，会产生了多个不连续的小物理内存，导致新的程序无法被装载，所以**会出现外部内存碎片的问题**。\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvaziky1u3s0",
                                    "created": 1693917152312,
                                    "text": "内存交换",
                                    "note": "解决「外部内存碎片」的问题就是内存交换。\n\n可以把音乐程序占用的那 256MB 内存写到硬盘上，然后再从硬盘上读回来到内存里。不过再读回的时候，我们不能装载回原来的位置，而是紧紧跟着那已经被占用了的 512MB 内存后面。这样就能空缺出连续的 256MB 空间，于是新的 200MB 程序就可以装载进来。\n\n这个内存交换空间，在 Linux 系统里，也就是我们常看到的 `Swap` 空间，这块空间是从硬盘划分出来的，**用于内存与硬盘的空间交换**。\n\n对于多进程的系统来说，用分段的方式，外部内存碎片是很容易产生的，产生了外部内存碎片，那不得不重新 Swap 内存区域，这个过程会产生性能瓶颈。\n\n为了解决内存分段的「外部内存碎片和内存交换效率低」的问题，就出现了内存分页。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cvazldl28600",
                            "created": 1693917371381,
                            "text": "简单的内存分页",
                            "note": "把物理内存分成一个一个的片段，称之为页，然后把虚拟内存分成一样大小的片段，使用页表建立他们之间的映射关系。\n\n**分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小**。这样一个连续并且尺寸固定的内存空间，我们叫**页（Page）**。在 Linux 下，每一页的大小为 `4KB`。\n\n分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是**只有在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去**。\n\n虚拟地址与物理地址之间通过**页表**来映射。\n\n页表是存储在内存里的，**内存管理单元 （MMU）**就做将虚拟内存地址转换成物理地址的工作。\n\n当进程访问的虚拟地址在页表中查不到时，系统会产生一个**缺页异常**，进入系统内核空间分配物理内存、更新进程页表，最后再返回用户空间，恢复进程的运行。\n\n虚拟地址 = 虚拟页号+页内偏移量\n从页表中索引对应的物理页号，得到物理内存基址，\n物理地址=物理内存基址+页内偏移量\n\n**页号**作为页表的索引，页表包含物理页每页所在**物理内存的基地址**，这个基地址与**页内偏移量**的组合就形成了物理内存地址：\n![](https://camo.githubusercontent.com/f8de9f8e6028fa86802790852fa243aafc13db4c3d645f4a520304ae705e9483/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f37383834663464386462343934396637613562623462626430663435323630392e706e67)\n\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvbi2jg0bg80",
                                    "created": 1693969496306,
                                    "text": "内存碎片",
                                    "note": "内存分页由于内存空间都是预先划分好的，也就不会像内存分段一样，在段与段之间会产生间隙非常小的内存，这正是分段会产生外部内存碎片的原因。而采用了分页，**页与页之间是紧密排列的，所以不会有外部碎片**。\n\n但是，因为内存分页机制分配内存的最小单位是一页，即使程序不足一页大小，我们最少只能分配一个页，所以页内会出现内存浪费，所以针对**内存分页机制会有内部内存碎片**的现象。\n\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvbi3m1uxco0",
                                    "created": 1693969580344,
                                    "text": "内存交换 Swap",
                                    "note": "如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，称为**换出（Swap Out）**。一旦需要的时候，再加载进来，称为**换入（Swap In）**。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，**内存交换的效率就相对比较高**。\n\n![](https://camo.githubusercontent.com/2e9148f13bb6b3156d889e1e2293568d78436520bf5a95145e252e2b73a9c9cb/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f33383861323966343566653934376535613439323430653465666631333533382e706e67)\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvbi9ipxt600",
                                    "created": 1693970043278,
                                    "text": "缺陷",
                                    "note": "**每个进程都是有自己的虚拟地址空间的，也就说都有自己的页表**。页表是存储在内存中的。\n\n在 32 位的环境下，虚拟地址空间共有 4GB，假设一个页的大小是 `4KB（2^12）`，那么就需要大约 `100 万（2^20）`个页，每个「页表项」需要 4 个字节大小来存储，那么整个 4GB 空间的映射就需要有 `4MB` 的内存来**存储页表**。\n\n如果进程很多的话，内存就不够用了。\n\n要这个问题，就需要采用一种叫作多级页表（Multi-Level Page Table）的解决方案。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cvbijrvebns0",
                            "created": 1693970846841,
                            "text": "多级页表",
                            "note": "对于单页表的实现方式，在 32 位和页大小 4KB 的环境下，一个进程的页表需要装下 100 多万个「页表项」，并且每个页表项是占用 4 字节大小的，于是相当于每个页表需占用 4MB 大小的空间。\n\n把这个 100 多万个「页表项」的单级页表再分页，将页表（一级页表）分为 1024 个页表（二级页表），每个表（二级页表）中包含 1024 个「页表项」，形成**二级分页**：\n![](https://camo.githubusercontent.com/948df7c1a98458144d60a61137d9751c729a060fa79adfe01f32346711a1feb9/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f31393239366532343962323234306332396639633532626537306636313164352e706e67)\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvbir4oepkw0",
                                    "created": 1693971423266,
                                    "text": "占用空间",
                                    "note": "> 分了二级表，映射 4GB 地址空间就需要 4KB（一级页表）+ 4MB（二级页表）的内存，这样占用空间不是更大了吗？\n\n如果 4GB 的虚拟地址全部都映射到了物理内存上的话，二级分页占用空间确实是更大了，但是，我们往往不会为一个进程分配那么多内存。\n\n如果使用了二级分页，**一级页表就可以覆盖整个 4GB 虚拟地址空间，但如果某个一级页表的页表项没有被用到，也就不需要创建这个页表项对应的二级页表了，即可以在需要时才创建二级页表**。\n\n> 为什么不分级的页表就做不到这样节约内存呢\n\n保存在内存中的页表承担的职责是将虚拟地址翻译成物理地址。假如虚拟地址在页表中找不到对应的页表项，计算机系统就不能工作了。所以**页表一定要覆盖全部虚拟地址空间**，不分级的页表就需要有 100 多万个页表项来映射，而二级分页则只需要 1024 个页表项（此时一级页表覆盖到了全部虚拟地址空间，二级页表在需要时创建）。\n\n把二级分页再推广到多级页表，就会发现页表占用的内存空间更少了。\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvbiwdmyn740",
                                    "created": 1693971834590,
                                    "text": "64 位",
                                    "note": "对于 64 位的系统，两级分页肯定不够了，就变成了四级目录，分别是：\n\n- 全局页目录项 PGD（Page Global Directory）\n- 上层页目录项 PUD（Page Upper Directory）\n- 中间页目录项 PMD（Page Middle Directory）\n- 页表项 PTE（Page Table Entry）\n\n![](https://camo.githubusercontent.com/d5a244a2dbfbfe175b0a0f603861ad9c3431b2b12b16bed57cd673c17c2da680/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f73742f2545362539332538442545342542442539432545372542332542422545372542422539462f2545352538362538352545352541442539382545372541452541312545372539302538362f2545352539422539422545372542412541372545352538382538362545392541312542352e706e67)\n\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvbiyesbvk00",
                                    "created": 1693971993820,
                                    "text": "TLB",
                                    "note": "多级页表解决了空间上的问题，但是却增加了转换所需的时间。\n\n程序是有局部性的，即在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。可以利用这一特性，把最常访问的几个页表项存储到访问速度更快的硬件。\n\n于是 CPU 芯片中，加入了一个专门存放程序最常访问的页表项的 Cache，这个 Cache 就是 `TLB（Translation Lookaside Buffer）` ，通常称为页表缓存、转址旁路缓存、快表等。\n\n![](https://camo.githubusercontent.com/df34816746a81eb0df9f43175d94b49dc3a9f88c341607701812e38a1dd52382/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f61336364663237363436623234363134613634636663356437636366666133352e706e67)\n\n内存管理单元（Memory Management Unit）芯片，它用来完成地址转换和 TLB 的访问与交互。\n\n有了 TLB 后，那么 CPU 在寻址时，会先查 TLB，如果没找到，才会继续查常规的页表。\n\nTLB 的命中率其实是很高的，因为程序最常访问的页就那么几个。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cvbj3cit8940",
                            "created": 1693972380712,
                            "text": "段页式内存管理",
                            "note": "**段页式内存管理**实现的方式：\n\n- 先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；\n- 接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；\n\n![](https://camo.githubusercontent.com/4803140ac7878cc56f72505548392a9f8f2a8592c8c2b5c0f1cfc69e2e6d7901/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f66313965626436663730663834303833623064383763633565396465613865332e706e67)\n\n虚拟地址= 段号+段内页号+页内位移\n\n用于段页式地址变换的数据结构是每一个程序一张**段表**，每个段又建立一张**页表**，段表中的地址是**页表的起始地址**，而页表中的地址则为某页的**物理页号**，如图所示：\n![](https://camo.githubusercontent.com/24fc2f9a0140ade1bfd0bbf707362482948170a933a1b624bdc517fcbdc1584e/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f38393034666238396165306334396334623066326637623561306137623039392e706e67)\n\n可用软、硬件相结合的方法实现段页式地址变换，这样虽然增加了硬件成本和系统开销，但提高了内存的利用率。\n\n段页式内存管理兼具了段式内存分配和页式内存分配的优点，虚拟内存段不需要再对应连续的物理内存空间，提高了内存交换的效率。具有以下优点（ChatGPT）：\n\n- 逻辑地址空间更灵活：段页式内存管理可以将程序的逻辑地址空间划分为多个段，使得不同部分的代码和数据可以被独立管理和保护。\n\n- 虚拟内存支持：通过分页机制，段页式内存管理可以提供虚拟内存支持。程序可以访问远超物理内存容量的逻辑地址空间，而不需要一次性加载全部数据到内存中。\n\n- 内存保护：通过设置合适的访问权限和段界限，段页式内存管理可以实现对不同段的保护，防止程序越界访问和非法操作。\n\n- 共享和动态链接：段页式内存管理允许多个程序共享相同的代码段，减少内存占用。同时，也支持动态链接，使得程序在运行时可以加载和卸载模块。\n\n尽管段页式内存管理提供了上述优点，但它也存在一些缺点，如**内存碎片问题、页表管理开销较大**等。因此，实际的操作系统会根据具体需求和硬件平台选择合适的内存管理机制。"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvbj3lkgiew0",
                                    "created": 1693972400402,
                                    "text": "topic"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cvbm4imf5io0",
                    "created": 1693980935684,
                    "text": "Linux 内存管理"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvbm5983zd40",
                            "created": 1693980993592,
                            "text": "Intel 处理器",
                            "note": "由于 Intel 处理器的发展史，页式内存管理的作用是在由段式内存管理所映射而成的地址上再加上一层地址映射。\n\n由段式内存管理映射而成的地址称之为**线性地址（也称虚拟地址）**。于是，段式内存管理先将逻辑地址映射成线性地址，然后再由页式内存管理将线性地址映射成物理地址。\n\n![](https://camo.githubusercontent.com/2bcb7cab697e23196e292b169a4422fa45112916b8905430420dc761f0dfcf2c/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f62633061616166333739666334626338383832656664393462393035326236342e706e67)\n\n逻辑地址和线性地址：\n\n- 程序所使用的地址，通常是没被段式内存管理映射的地址，称为逻辑地址；\n- 通过段式内存管理映射的地址，称为线性地址，也叫虚拟地址；\n\n逻辑地址是「段式内存管理」转换前的地址，线性地址则是「页式内存管理」转换前的地址。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvbm6nd0mow0",
                            "created": 1693981102728,
                            "text": "Linux",
                            "note": "**Linux 内存主要采用的是页式内存管理，但同时也不可避免地涉及了段机制**。\n\n**Linux 系统中的每个段都是从 0 地址开始的整个 4GB 虚拟空间（32 位环境下），也就是所有的段的起始地址都是一样的**。这意味着，Linux 系统中的代码，包括操作系统本身的代码和应用程序代码，所**面对的地址空间都是线性地址空间（虚拟地址），这种做法相当于屏蔽了处理器中的逻辑地址概念，段只被用于访问控制和内存保护**。\n\n![](https://camo.githubusercontent.com/3148b0621f1f99e84d3741e9c5b1fd9156881a9e065044ee464af41371d4a754/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f33613663623465336632373234316433623039623437363662623062313132342e706e67)\n\n- 32 位系统的内核空间占用 `1G`，位于最高处，剩下的 `3G` 是用户空间；\n- 64 位系统的内核空间和用户空间都是  `128T`，分别占据整个内存空间的最高和最低处，剩下的中间部分是未定义的。\n\n虽然每个进程都各自有独立的虚拟内存，但是**每个虚拟内存中的内核地址，其实关联的都是相同的物理内存**。这样，进程切换到内核态后，就可以很方便地访问内核空间内存。\n\n用户空间分布的情况，以 32 位系统为例：\n![](https://camo.githubusercontent.com/5a5ae4af45f41dce2cd8162fd3e56ba245e5d764b358477a8692c4ebd6f106d7/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f696d675f636f6e766572742f62346638383262393434373736306365353332316465313039323736656332332e706e67)\n\n用户空间内存，从低到高分别是 6 种不同的内存段：\n\n- 程序文件段，包括二进制可执行代码\n- 已初始化数据段，包括静态常量\n- 未初始化数据段，包括未初始化的静态变量\n- 堆段，包括动态分配的内存，从低地址开始向上增长\n- 文件映射段，包括动态库、共享内存等，从低地址开始向上增长（[跟硬件和内核版本有关](http://lishiwen4.github.io/linux/linux-process-memory-location)）\n- 栈段，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 8 MB，可以自定义。\n\n在这 7 个内存段中，**堆和文件映射段的内存是动态分配的**。比如说，使用 C 标准库的 `malloc()` 或者 `mmap()` ，就可以分别在堆和文件映射段动态分配内存。"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}