{
    "root": {
        "data": {
            "id": "cvg3j3dbhtc0",
            "created": 1694436276640,
            "text": "深入理解 Linux 虚拟内存管理"
        },
        "children": [
            {
                "data": {
                    "id": "cvfy7s9nzwg0",
                    "created": 1694421284919,
                    "text": "Linux 进程虚拟内存空间的布局",
                    "note": "查看某个进程的实际虚拟内存布局： `cat /proc/pid/maps` 或者 `pmap pid` 。"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvfy80g8s9s0",
                            "created": 1694421302731,
                            "text": "32 位机器",
                            "note": "在 32 位机器上，指针的寻址范围为 2^32，所能表达的虚拟内存空间为 4 GB。所以在 32 位机器上进程的虚拟内存地址范围为：`0x0000 0000 - 0xFFFF FFFF`。\n\n![](https://cdn.xiaolincoding.com//mysql/other/ffb6e1727e2289f142f6a2a6291cd68c.png)\n\n- 内核态虚拟内存空间为 1 GB，虚拟内存地址范围为：`0xC000 0000 - 0xFFFF FFFF`。进程虽然可以看到这段内核空间地址，但是就是不能访问。\n- 用户态虚拟内存空间为 3 GB，虚拟内存地址范围为：`0x0000 0000 - 0xC000 0000` 。**注意图中终止地址是错的！**`0xC000 0000 = 12*16^7 = 3GB`\n- 不可访问的保留区，`0x0000 0000 - 0x0804 8000`。比如在 C 语言中我们通常会将一些无效的指针设置为 NULL，指向这块不允许访问的地址。\n\n保留区的上边就是代码段和数据段，它们是从程序的二进制文件中直接加载进内存中的，BSS 段中的数据也存在于二进制文件中，因为内核知道这些数据是没有初值的，所以在二进制文件中只会记录 BSS 段的大小，在加载进内存时会生成一段 0 填充的内存空间。\n\n内核中使用 `start_brk` 标识堆的起始位置，`brk` 标识堆当前的结束位置。当堆申请新的内存空间时，只需要将 brk 指针增加对应的大小，回收地址时减少对应的大小即可。比如当我们通过 `malloc` 向内核申请很小的一块内存时（128K 之内），就是通过改变 brk 位置实现的。\n\n文件映射与匿名映射区域。进程运行时所**依赖的动态链接库**中的代码段，数据段，BSS 段就加载在这里。还有我们调用 `mmap` 映射出来的一段**虚拟内存空间**也保存在这个区域。注意：在文件映射与匿名映射区的地址增长方向是**从高地址向低地址增长**。\n\n栈空间会保存函数运行过程所需要的**局部变量以及函数参数等函数调用信息**。栈空间中的地址增长方向是从高地址向低地址增长。\n\n在内核中使用 `start_stack` 标识栈的起始位置，`RSP` 寄存器中保存栈顶指针 `stack pointer`，`RBP` 寄存器中保存的是栈基地址。\n\n!!! note\n\tRBP 用于访问函数内的局部变量和参数，而 RSP 用于栈空间的分配和释放。它们在程序执行期间动态地变化，确保正确的函数调用和栈帧管理。\n    - RBP（Base Pointer Register）寄存器是用来指向当前栈帧的基址的寄存器。它通常用于寻找局部变量和函数参数的地址。RBP 指向当前函数栈帧的底部，它的值不随着函数的嵌套而改变，因此可以被用作一个稳定的参考点来访问函数内的局部变量。\n\t- RSP（Stack Pointer Register）寄存器是用来指向当前栈顶的指针。它在函数调用和返回时用于分配和释放栈空间。当函数被调用时，RSP 会被减小相应的值，以为新的栈帧腾出空间。当函数返回时，RSP 会被恢复到先前的值，释放掉该函数的栈帧空间。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvfy81nakbk0",
                            "created": 1694421305334,
                            "text": "64 位机器",
                            "note": "2^64，所能表达的虚拟内存空间为 16 EB 。\n\n但在目前的 64 位系统下只使用了 `48 位`来描述虚拟内存空间，寻址范围为 2^48 ，所能表达的虚拟内存空间为 `256TB`。\n\n![](https://cdn.xiaolincoding.com//mysql/other/532e6cdf4899588f8b873b6435cba2d8.png)\n\n- 内核态虚拟内存空间 128 TB，虚拟内存地址范围为：`0xFFFF 8000 0000 0000 - 0xFFFF FFFF FFFF FFFF` 。`0x0000 7FFF FFFF F000 = 128 TB`\n- 用户态虚拟内存空间 128 TB，虚拟内存地址范围为：0x0000 0000 0000 0000 - 0x0000 7FFF FFFF F000 。并不是严格的 128 TB大小。\n- `canonical address 空洞`，用户态虚拟内存空间与内核态虚拟内存空间之间形成的一段 `0x0000 7FFF FFFF F000 - 0xFFFF 8000 0000 0000` 地址空洞。\n\n在低 128T 的用户态地址空间中，所有虚拟内存地址的高 16 位全部为 0 。在高 128T 的内核态虚拟内存空间中，所有虚拟内存地址的高 16 位全部为 1 。这个高 16 位的空闲地址被称为 canonical 。\n\n如果虚拟内存地址中的**高 16 位全部为 0 （表示用户空间虚拟内存地址）**或者**全部为 1 （表示内核空间虚拟内存地址）**，这种地址的形式我们叫做 `canonical form`，对应的地址我们称作 `canonical address` 。\n\n那么对于 `canonical address 空洞` ：`0x0000 7FFF FFFF F000 - 0xFFFF 8000 0000 0000` 。如果某个虚拟地址落在这段 canonical address 空洞区域中，那就是既不在用户空间，也不在内核空间，肯定是非法访问了。\n\n64 位系统中的虚拟内存布局和 32 位系统中的虚拟内存布局大体上是差不多的。主要不同的地方有三点：\n\n- 由高 16 位空闲地址造成的 `canonical address 空洞`。在这段范围内的虚拟内存地址是不合法的，因为它的高 16 位既不全为 0 也不全为 1，不是一个 canonical address，所以称之为 canonical address 空洞。\n- 在代码段跟数据段的中间还有一段不可以读写的**保护段**，它的作用是防止程序在读写数据段的时候越界访问到代码段，这个保护段可以让越界访问行为直接崩溃，防止它继续往下运行。\n- 用户态虚拟内存空间与内核态虚拟内存空间分别占用 128T，其中低128T 分配给用户态虚拟内存空间，高 128T 分配给内核态虚拟内存空间。"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cvg0224rr1c0",
                    "created": 1694426478426,
                    "text": "进程虚拟内存空间的管理",
                    "note": "进程在内核中的描述符 task_struct 结构：\n```c\nstruct task_struct {\n        // 进程id\n\t    pid_t\t\t\t\tpid;\n        // 用于标识线程所属的进程 pid\n\t    pid_t\t\t\t\ttgid;\n        // 进程打开的文件信息\n        struct files_struct\t\t*files;\n        // 内存描述符表示进程虚拟地址空间\n        struct mm_struct\t\t*mm;\n\n        .......... 省略 .......\n}\n```\n\n`mm_struct` 这个结构体中包含了进程虚拟内存空间的全部信息。每个进程都有唯一的 mm_struct 结构体，也就是前边提到的每个进程的虚拟地址空间都是独立，互不干扰的。\n\n当我们调用 `fork()` 函数创建进程的时候，表示进程地址空间的 `mm_struct` 结构会随着进程描述符 `task_struct` 的创建而创建。\n\n- 通过 `fork()` 函数创建出的子进程，它的**虚拟内存空间以及相关页表相当于父进程虚拟内存空间的一份拷贝**。\n- 通过 `vfork` 或者 `clone` 系统调用创建出的子进程，会将父进程的虚拟内存空间以及相关页表直接赋值给子进程。**父进程和子进程的虚拟内存空间是共享的**。这样子进程就变成了我们熟悉的线程。\n\n**是否共享地址空间几乎是进程和线程之间的本质区别。Linux 内核并不区别对待它们，线程对于内核来说仅仅是一个共享特定资源的进程而已**。\n\n内核线程和用户态线程的区别就是**内核线程没有相关的内存描述符 `mm_struct`**，内核线程对应的 task_struct 结构中的 mm 域指向 Null，所以内核线程之间调度是**不涉及地址空间切换**的。\n\n",
                    "expandState": "expand"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvg1kfxh3a00",
                            "created": 1694430740124,
                            "text": "内核如何划分用户态和内核态虚拟内存空间",
                            "note": "`task_size` 定义了用户态地址空间与内核态地址空间之间的分界线：\n```c\nstruct mm_struct {\n    unsigned long task_size;\t/* size of task vm space */\n}\n```\n\n对于 32 位系统，内核在 `/arch/x86/include/asm/page_32_types.h` 文件中关于 `TASK_SIZE` 的定义：\n```c\n/*\n * User space process size: 3GB (default).\n */\n#define TASK_SIZE\t\t__PAGE_OFFSET\n```\n\n`__PAGE_OFFSET` 的值在 32 位系统下为 `0xC000 0000`：\n\n![](https://cdn.xiaolincoding.com//mysql/other/445cb4fb8bfeff15d6350b278f370919.png)\n\n对于64 位系统，内核在 `/arch/x86/include/asm/page_64_types.h` 文件中关于 TASK_SIZE 的定义：\n```c\n#define TASK_SIZE\t\t(test_thread_flag(TIF_ADDR32) ? \\\n\t\t\t\t\tIA32_PAGE_OFFSET : TASK_SIZE_MAX)\n\n#define TASK_SIZE_MAX\t\ttask_size_max()\n\n#define task_size_max()\t\t((_AC(1,UL) << __VIRTUAL_MASK_SHIFT) - PAGE_SIZE)\n\n#define __VIRTUAL_MASK_SHIFT\t47\n```\n计算 TASK_SIZE：在 `task_size_max()` 的计算逻辑中 1 左移 47 位得到的地址是 `0x0000800000000000`，然后减去一个 `PAGE_SIZE （默认为 4K）`的大小`0x1000`，就是 `0x00007FFFFFFFF000`，共 128T。\n\n可以看出，64 位虚拟内存空间的布局是和物理内存页 page 的大小有关的。\n\nPAGE_SIZE 定义在 `/arch/x86/include/asm/page_types.h`文件中：\n```c\n/* PAGE_SHIFT determines the page size */\n#define PAGE_SHIFT\t\t12\n#define PAGE_SIZE\t\t(_AC(1,UL) << PAGE_SHIFT)\n```"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvg1uml6xls0",
                            "created": 1694431538261,
                            "text": "内核如何布局进程虚拟内存空间",
                            "note": "mm_struct 结构体:\n```c\nstruct mm_struct {\n    unsigned long task_size;    /* size of task vm space */\n    unsigned long start_code, end_code, start_data, end_data;\n    unsigned long start_brk, brk, start_stack;\n    unsigned long arg_start, arg_end, env_start, env_end;\n    unsigned long mmap_base;  /* base of mmap area */\n    unsigned long total_vm;    /* Total pages mapped */\n    unsigned long locked_vm;  /* Pages that have PG_mlocked set */\n    unsigned long pinned_vm;  /* Refcount permanently increased */\n    unsigned long data_vm;    /* VM_WRITE & ~VM_SHARED & ~VM_STACK */\n    unsigned long exec_vm;    /* VM_EXEC & ~VM_WRITE & ~VM_STACK */\n    unsigned long stack_vm;    /* VM_STACK */\n\n\tstruct vm_area_struct *mmap;\t\t/* list of VMAs， VMAs 链表的头节点 */\n    struct rb_root mm_rb; //  VMAs 红黑树的根节点\n       ...... 省略 ........\n}\n```\n\n![](https://cdn.xiaolincoding.com//mysql/other/2b2dbb2b6ea19871152a3bf6566df205.png)\n\n- `start_code` 和 `end_code` 是代码段的起始和结束位置。程序编译后的二进制文件中的机器码被加载进内存之后就放在这里。\n- `start_data`  和 `end_data` 是数据段的起始和结束位置。二进制文件中存放的全局变量和静态变量被加载进内存后存放在这里\n- BSS 段大小是固定的，存放未被初始化的全局变量和静态变量。这些变量在被加载到内存时会生成一段 0 填充的内存区域（BSS 段）。\n- `start_brk` 是堆的起始位置， `brk` 是堆顶位置。\n- `mmap_base` 是内存映射区的起始地址。\n- `start_stack` 是栈的起始位置，在 RBP 寄存器中存储，栈顶指针 `stack pointer` 在 RSP 寄存器中存储。栈中内存地址由高地址向低地址增长。\n- `arg_start`  和 `arg_end` 是参数列表位置；`env_start` 和 `env_end` 是环境变量的位置。它们都位于栈中的最高地址处。\n\n结构体中除了上述用于划分虚拟内存区域的变量之外，还定义了一些虚拟内存与物理内存映射内容相关的统计变量：\n\n- `total_vm` 表示在进程虚拟内存空间中总共与物理内存**映射**的页的总数。映射表示只是将虚拟内存与物理内存建立关联关系，并不代表真正的分配物理内存。\n- `locked_vm` 就是被锁定不能换出的内存页总数，`pinned_vm` 表示既不能换出，也不能移动的内存页总数。\n- `data_vm` 表示数据段中映射的内存页数目，`exec_vm` 是代码段中存放可执行文件的内存页数目，`stack_vm` 是栈中所映射的内存页数目，这些变量均是表示进程虚拟内存空间中的虚拟内存使用情况。\n"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cvg29qvkbyg0",
                    "created": 1694432723058,
                    "text": "进程虚拟内存区域的管理",
                    "note": "代码段，数据段，堆，内存映射区，栈 这些虚拟内存区域在内核中使用`vm_area_struct`这个结构体描述，`VMA（virtual memory area）`：\n```c\nstruct vm_area_struct {\n\n\tunsigned long vm_start;\t\t/* Our start address within vm_mm. */\n\tunsigned long vm_end;\t\t/* The first byte after our end address\n\t\t\t\t\t   within vm_mm. */\n\t/*\n\t * Access permissions of this VMA.\n\t */\n\tpgprot_t vm_page_prot;\n\tunsigned long vm_flags;\t\n\n\tstruct anon_vma *anon_vma;\t/* Serialized by page_table_lock */\n    struct file * vm_file;\t\t/* File we map to (can be NULL). */\n\tunsigned long vm_pgoff;\t\t/* Offset (within vm_file) in PAGE_SIZE\n\t\t\t\t\t   units */\t\n\tvoid * vm_private_data;\t\t/* was vm_pte (shared mem) */\n\t/* Function pointers to deal with this struct. */\n\tconst struct vm_operations_struct *vm_ops;\n}\n```\n![](https://cdn.xiaolincoding.com//mysql/other/600ef23c454d9f3653ece44debaaf3a7.png)\n",
                    "expandState": "expand"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvg2ckug2cw0",
                            "created": 1694432945022,
                            "text": "定义虚拟内存区域的访问权限和行为规范",
                            "note": "`vm_page_prot` 和 `vm_flags` 都是用来标记 vm_area_struct 结构的，表示了这块虚拟内存区域的**访问权限和行为规范**。\n\n- 虚拟内存区域 VMA 由许多的虚拟页 (page) 组成，每个虚拟页需要经过页表的转换才能找到对应的物理页面。**页表中关于内存页的访问权限**就是由 vm_page_prot 决定的。\n\n- vm_flags 则偏向于定于**整个虚拟内存区域的访问权限以及行为规范**。描述的是虚拟内存区域中的整体信息，而不是虚拟内存区域中具体的某个独立页面。它是一个抽象的概念。可以通过 `vma->vm_page_prot = vm_get_page_prot(vma->vm_flags)` 实现到具体页面访问权限 vm_page_prot 的转换。\n\n常用的 vm_flags ：\n\n- VM_READ：\t可读\n- VM_WRITE：\t可写\n- VM_EXEC：\t可执行\n- VM_SHARD：\t可多进程之间共享\n- VM_IO：\t可映射至设备 IO 空间\n- VM_RESERVED：\t内存区域不可被换出\n- VM_SEQ_READ：\t内存区域可能被顺序访问。暗示内核可以预读\n- VM_RAND_READ：\t内存区域可能被随机访问。暗示内核减少甚至停止预读\n\n比如代码段这块内存区域的权限是可读，可执行，但是不可写。数据段具有可读可写的权限但是不可执行。堆则具有可读可写，可执行的权限（Java 中的字节码存储在堆中，所以需要可执行权限），栈一般是可读可写的权限，一般很少有可执行权限。而文件映射与匿名映射区存放了共享链接库，所以也需要可执行的权限。\n\n对于虚拟内存区域 VMA 设置的访问权限也会全部复制到区域中包含的内存页中。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvg2n620o080",
                            "created": 1694433774834,
                            "text": "关联内存映射中的映射关系",
                            "note": "接下来的三个属性 `anon_vma，vm_file，vm_pgoff` 和**虚拟内存映射**相关，虚拟内存区域可以映射到物理内存上，也可以映射到文件中，**映射到物理内存上我们称之为匿名映射，映射到文件中我们称之为文件映射**。\n\n> 匿名映射的情况\n\n当调用 `malloc` 申请内存时，如果申请的是小块内存（低于 128K）则会使用 `do_brk()` 系统调用通过调整堆中的 brk 指针大小来增加或者回收堆内存。\n\n如果申请的是比较大块的内存（超过 128K）时，则会调用 `mmap` 在虚拟内存空间中的文件映射与匿名映射区创建出一块 `VMA` 内存区域（这里是匿名映射）。这块匿名映射区域就用 `struct anon_vma `结构表示。\n\n> 文件映射的情况\n\n当调用 mmap 进行文件映射时，`vm_file` 属性就用来关联被映射的文件。这样一来虚拟内存区域就与映射文件关联了起来。`vm_pgoff` 则表示映射进虚拟内存中的文件内容在文件中的偏移。\n\n当然在匿名映射中，`vm_area_struct` 结构中的 vm_file 就为 null，vm_pgoff 也就没有了意义。\n\n`vm_private_data` 则用于存储 VMA 中的私有数据。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvg2se2eoso0",
                            "created": 1694434184092,
                            "text": "针对虚拟内存区域的相关操作",
                            "note": "`vm_ops` 用来指向针对虚拟内存区域 VMA 的相关操作的函数指针：\n```c\nstruct vm_operations_struct {\n\tvoid (*open)(struct vm_area_struct * area);\n\tvoid (*close)(struct vm_area_struct * area);\n    vm_fault_t (*fault)(struct vm_fault *vmf);\n    vm_fault_t (*page_mkwrite)(struct vm_fault *vmf);\n\n    ..... 省略 .......\n}\n```\n\n- 当指定的虚拟内存区域被加入到进程虚拟内存空间中时，`open` 函数会被调用\n- 当虚拟内存区域 VMA 从进程虚拟内存空间中被删除时，`close` 函数会被调用\n- 当进程访问虚拟内存时，访问的页面不在物理内存中，可能是未分配物理内存也可能是被置换到磁盘中，这时就会产生缺页异常，`fault` 函数就会被调用。\n- 当一个只读的页面将要变为可写时，`page_mkwrite` 函数会被调用。\n\n"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cvg31a5y1800",
                            "created": 1694434880877,
                            "text": "虚拟内存区域在内核中是如何被组织的",
                            "note": "`struct vm_area_struct` 结构中，与组织结构相关的一些属性：\n```c\nstruct vm_area_struct {\n\n\tstruct vm_area_struct *vm_next, *vm_prev;\n\tstruct rb_node vm_rb;\n    struct list_head anon_vma_chain; \n\tstruct mm_struct *vm_mm;\t/* The address space we belong to. */\n    \n    ……\n```\n\n![](https://cdn.xiaolincoding.com//mysql/other/d945d22667c4ea56dbd2f19677306a91.png)\n\n内核中关于这些虚拟内存区域的操作除了遍历之外还有许多需要根据特定虚拟内存地址在虚拟内存空间中查找特定的虚拟内存区域。\n\n尤其在进程虚拟内存空间中包含的内存区域 VMA 比较多的情况下，使用红黑树查找特定虚拟内存区域的时间复杂度是 O( logN ) ，可以显著减少查找所需的时间。\n\n所以在内核中，同样的内存区域 vm_area_struct 会有两种组织形式：\n\n- 一种是双向链表用于高效的遍历\n- 另一种就是红黑树用于高效的查找。\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvg3fg6d0h40",
                                    "created": 1694435991061,
                                    "text": "双向链表",
                                    "note": "vm_area_struct 结构中的 vm_next ，vm_prev 指针分别指向 VMA 节点所在双向链表中的后继节点和前驱节点，内核中的这个 VMA 双向链表是有顺序的，所有 VMA 节点按照低地址到高地址的增长方向排序。\n\n双向链表中的最后一个 VMA 节点的 vm_next 指针指向 NULL，双向链表的头指针存储在内存描述符 `struct mm_struct` 结构中的 `mmap` 中，正是这个 `mmap` 串联起了整个虚拟内存空间中的虚拟内存区域。\n在每个虚拟内存区域 VMA 中又通过 `struct vm_area_struct` 中的 `vm_mm` 指针指向了所属的虚拟内存空间 `mm_struct`。\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvg3gabdn6o0",
                                    "created": 1694436056668,
                                    "text": "红黑树",
                                    "note": "每个 VMA 区域都是红黑树中的一个节点，通过 `struct vm_area_struct` 结构中的 `vm_rb` 将自己连接到红黑树中。而红黑树中的根节点存储在内存描述符 `struct mm_struct` 中的 `mm_rb` 中。"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cvg2ckw7w9s0",
                    "created": 1694432945129,
                    "text": "二进制文件如何映射到虚拟内存空间",
                    "note": "程序代码编译之后会生成一个 ELF 格式的二进制文件，这个二进制文件中包含了程序运行时所需要的元信息，比如程序的机器码，程序中的全局变量以及静态变量等。\n\nELF 格式的二进制文件中的布局和我们前边讲的虚拟内存空间中的布局类似，也是一段一段的，每一段包含了不同的元数据。\n\n磁盘文件中的段我们叫做 `Section`，内存中的段我们叫做 `Segment`，也就是内存区域。\n\n Section 会在进程运行之前加载到内存中并映射到 Segment。通常是多个 Section 映射到一个 Segment。\n\n比如磁盘文件中的 `.text`，`.rodata` 等一些只读的 Section，会被映射到内存的一个只读可执行的 Segment 里（代码段）。而 `.data`，`.bss` 等一些可读写的 Section，则会被映射到内存的一个具有读写权限的 Segment 里（数据段，BSS 段）。\n\n内核使用 `load_elf_binary` 加载 Section  并映射进虚拟内存空间。\n\n这个函数的作用很大：\n\n- 加载内核\n- 启动第一个用户态进程 init \n- fork 完了以后，调用 exec 运行一个二进制程序\n\n当 exec 运行一个二进制程序的时候，除了解析 ELF 的格式之外，另外一个重要的事情就是建立上述提到的内存映射：\n```c\nstatic int load_elf_binary(struct linux_binprm *bprm)\n{\n      ...... 省略 ........\n  // 设置虚拟内存空间中的内存映射区域起始地址 mmap_base\n  setup_new_exec(bprm);\n\n     ...... 省略 ........\n  // 创建并初始化栈对应的 vm_area_struct 结构。\n  // 设置 mm->start_stack 就是栈的起始地址也就是栈底，并将 mm->arg_start 是指向栈底的。\n  retval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),\n         executable_stack);\n\n     ...... 省略 ........\n  // 将二进制文件中的代码部分映射到虚拟内存空间中\n  error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt,\n        elf_prot, elf_flags, total_size);\n\n     ...... 省略 ........\n // 创建并初始化堆对应的的 vm_area_struct 结构\n // 设置 current->mm->start_brk = current->mm->brk，设置堆的起始地址 start_brk，结束地址 brk。 起初两者相等表示堆是空的\n  retval = set_brk(elf_bss, elf_brk, bss_prot);\n\n     ...... 省略 ........\n  // 将进程依赖的动态链接库 .so 文件映射到虚拟内存空间中的内存映射区域\n  elf_entry = load_elf_interp(&loc->interp_elf_ex,\n              interpreter,\n              &interp_map_addr,\n              load_bias, interp_elf_phdata);\n\n     ...... 省略 ........\n  // 初始化内存描述符 mm_struct\n  current->mm->end_code = end_code;\n  current->mm->start_code = start_code;\n  current->mm->start_data = start_data;\n  current->mm->end_data = end_data;\n  current->mm->start_stack = bprm->p;\n\n     ...... 省略 ........\n}\n```"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cvgly2rn9hc0",
                    "created": 1694488230770,
                    "text": "内核的虚拟内存空间",
                    "note": "不同进程之间的虚拟内存空间是相互隔离的，彼此之间相互独立，相互感知不到其他进程的存在。使得进程以为自己拥有所有的内存资源。\n\n而内核态虚拟内存空间是所有进程共享的，不同进程进入内核态之后看到的虚拟内存空间全部是一样的。\n\n!!! warning\n\t进程进入内核态之后使用的仍然是**虚拟内存地址**，只不过在内核中使用的虚拟内存地址被限制在了内核态虚拟内存空间范围中。"
                },
                "children": [
                    {
                        "data": {
                            "id": "cvgm1or2uzk0",
                            "created": 1694488513718,
                            "text": "32 位体系内核虚拟内存空间布局",
                            "note": "32 位下，内核态虚拟内存空间为 1 GB，虚拟内存地址范围为：`0xC000 000 - 0xFFFF FFFF`。\n\n内核虚拟内存空间在 32 位体系下只有 1G 大小，实在太小了，因此需要精细化的管理，于是按照功能分类划分除了很多内核虚拟内存区域。\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvgm30382ls0",
                                    "created": 1694488616761,
                                    "text": "直接映射区",
                                    "note": "内核虚拟内存空间中，位于最前边有一块 `896M` 大小的区域，我们称之为**直接映射区**或者**线性映射区**，地址范围为 `3G - 3G + 896M` 。\n\n这块 896M 大小的虚拟内存会直接映射到 `0 - 896M` 这块 896M 大小的物理内存上，这块区域中的虚拟内存地址直接减去 `0xC000 0000 (3G)` 就得到了物理内存地址。所以我们称这块区域为直接映射区。\n\n![](https://cdn.xiaolincoding.com//mysql/other/1cf5fc48692826d8446638bbc5dd0e0b.png)\n\n!!! note\n\t虽然这块区域中的虚拟地址是直接映射到物理地址上，但是内核在访问这段区域的时候还是走的虚拟内存地址，内核也会为这块空间建立映射页表。\n\n在这段 896M 大小的物理内存中，前 1M 已经在系统启动的时候被系统占用，1M 之后的物理内存存放的是**内核**代码段，数据段，BSS 段（这些信息起初存放在 ELF格式的二进制文件中，在系统启动的时候被加载进内存）。\n\n可以通过 `cat /proc/iomem` 命令查看具体物理内存布局情况。"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "cvgm7omrdtk0",
                                            "created": 1694488983641,
                                            "text": "存了啥",
                                            "note": "当使用 `fork` 系统调用创建进程的时候，内核会创建一系列进程相关的描述符，比如之前提到的进程的核心数据结构 `task_struct`，进程的内存空间描述符 `mm_struct`，以及虚拟内存区域描述符 `vm_area_struct` 等。\n\n这些**进程相关的数据结构**会被存放到这 896M 的物理内存和内核态虚拟内存空间中。\n\n当进程被创建完毕之后，在内核运行的过程中，会涉及内核栈的分配，**内核会为每个进程分配一个固定大小的内核栈**（一般是两个页大小，依赖具体的体系结构），**每个进程的整个调用链必须放在自己的内核栈中，内核栈也是分配在直接映射区**。\n\n与进程用户空间中的栈不同的是，**内核栈容量小而且是固定的，用户空间中的栈容量大而且可以动态扩展**。内核栈的溢出危害非常巨大，它会直接悄无声息的覆盖相邻内存区域中的数据，破坏数据。\n"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "cvgmexxlevs0",
                                            "created": 1694489552437,
                                            "text": "DMA",
                                            "note": "内核对物理内存的管理都是以页为最小单位来管理的，每页默认 4K 大小，理想状况下任何种类的数据页都可以存放在任何页框中，没有什么限制。但是实际的计算机体系结构受到硬件方面的限制制约，间接导致限制了页框的使用方式。\n\n比如在 X86 体系结构下，ISA 总线的 `DMA （直接内存存取）控制器`，只能对内存的前 16M 进行寻址，这就导致了 ISA 设备不能在整个 32 位地址空间中执行 DMA，只能使用物理内存的前 16M 进行 DMA 操作。\n\n因此直接映射区的前 16M 专门让内核用来为 DMA 分配内存，这块 `16M` 大小的内存区域我们称之为 `ZONE_DMA`。\n\n而直接映射区中剩下的部分也就是从 `16M 到 896M（不包含 896M）`这段区域，我们称之为 `ZONE_NORMAL`。从字面意义上我们可以了解到，这块区域包含的就是正常的页框（使用没有任何限制）。\n\n用于 DMA 的内存必须从 `ZONE_DMA` 区域中分配。"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "cvgmg5fjnjk0",
                                    "created": 1694489647124,
                                    "text": "ZONE_HIGHMEM 高端内存",
                                    "note": "**物理内存** 896M 以上的区域被内核划分为 `ZONE_HIGHMEM` 区域，我们称之为`高端内存`。\n\n![](https://cdn.xiaolincoding.com//mysql/other/42ac90617218ba33ce7fdd16bdaa0c5c.png)\n\n- 物理内存假设为 4G，高端内存区域为 `4G - 896M = 3200M`。\n- 内核剩余可用的虚拟内存空间为 `1G - 896M = 128M`。\n\n这样一来物理内存中的 ZONE_HIGHMEM 区域就只能采用动态映射的方式映射到 128M 大小的内核虚拟内存空间中，也就是说只能**动态的一部分一部分的分批映射**，先映射正在使用的这部分，使用完毕解除映射，接着映射其他部分。\n\n内核虚拟内存空间中的 3G + 896M 这块地址在内核中定义为 `high_memory`，high_memory 往上有一段 `8M` 大小的`内存空洞`。空洞范围为：`high_memory 到 VMALLOC_START` 。\n\nVMALLOC_START 定义在内核源码 `/arch/x86/include/asm/pgtable_32_areas.h` 文件中：\n```c\n#define VMALLOC_OFFSET\t(8 * 1024 * 1024)\n\n#define VMALLOC_START\t((unsigned long)high_memory + VMALLOC_OFFSET)\n```\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvgmkvy37ao0",
                                    "created": 1694490018298,
                                    "text": "vmalloc 动态映射区",
                                    "note": "接下来 `VMALLOC_START 到 VMALLOC_END` 之间的这块区域成为`动态映射区`。采用动态映射的方式映射物理内存中的高端内存。\n\n![](https://cdn.xiaolincoding.com//mysql/other/0bd4766b19d043bb4aebdd06bdf8e67c.png)\n\n```c\n#ifdef CONFIG_HIGHMEM\n# define VMALLOC_END\t(PKMAP_BASE - 2 * PAGE_SIZE)\n#else\n# define VMALLOC_END\t(LDT_BASE_ADDR - 2 * PAGE_SIZE)\n#endif\n```\n\n和用户态进程使用 malloc 申请内存一样，在这块动态映射区内核是使用 `vmalloc` 进行内存分配。由于之前介绍的动态映射的原因，vmalloc **分配的内存在虚拟内存上是连续的，但是物理内存是不连续的**。通过页表来建立物理内存与虚拟内存之间的映射关系，从而可以将不连续的物理内存映射到连续的虚拟内存上。\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvgmn837c680",
                                    "created": 1694490201457,
                                    "text": "永久映射区",
                                    "note": "在 `PKMAP_BASE 到 FIXADDR_START` 之间的这段空间称为`永久映射区`。在内核的这段虚拟地址空间中**允许建立与物理高端内存的长期映射关系**。比如内核通过 `alloc_pages()` 函数在物理内存的高端内存中申请获取到的物理内存页，这些物理内存页可以通过调用 `kmap` 映射到永久映射区中。\n\n![](https://cdn.xiaolincoding.com//mysql/other/8638152cae4ee85e8467128cb3ffec76.png)\n\nLAST_PKMAP 表示永久映射区可以映射的页数限制：\n```c\n#define PKMAP_BASE\t\t\\\n\t((LDT_BASE_ADDR - PAGE_SIZE) & PMD_MASK)\n\n#define LAST_PKMAP 1024\n```\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvgmqd6ujiw0",
                                    "created": 1694490447654,
                                    "text": "固定映射区",
                                    "note": "下一个区域为`固定映射区`，区域范围为：`FIXADDR_START 到 FIXADDR_TOP`。\n\n![](https://cdn.xiaolincoding.com//mysql/other/0ea1b8d1d2e31c36001df7652f418e5e.png)\n\n内核文件`/arch/x86/include/asm/fixmap.h`：\n```c\n#define FIXADDR_START\t\t(FIXADDR_TOP - FIXADDR_SIZE)\n\nextern unsigned long __FIXADDR_TOP; // 0xFFFF F000\n#define FIXADDR_TOP\t((unsigned long)__FIXADDR_TOP)\n```\n\n在**固定映射区中虚拟地址是固定的，而被映射的物理地址是可以改变的**。也就是说，有些虚拟地址在编译的时候就固定下来了，是在内核启动过程中被确定的，而这些虚拟地址对应的物理地址不是固定的。采用固定虚拟地址的好处是它相当于一个**指针常量**（常量的值在编译时确定），指向物理地址，如果虚拟地址不固定，则相当于一个指针变量。\n\n> 那为什么会有固定映射这个概念呢 ? \n\n\t比如：在内核的启动过程中，有些模块需要使用虚拟内存并映射到指定的物理地址上，而且**这些模块也没有办法等待完整的内存管理模块初始化之后再进行地址映射**。因此，内核固定分配了一些虚拟地址，这些地址有固定的用途，使用该地址的模块在初始化的时候，将这些固定分配的虚拟地址映射到指定的物理地址上去。\n"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvgmxc61p2w0",
                                    "created": 1694490993978,
                                    "text": "临时映射区",
                                    "note": "内核虚拟内存空间中的最后一块区域为`临时映射区`。\n\nChatGPT：\n\n\t临时映射区（Temporary Mapping Area），是用来进行短期映射的。临时映射区在内核中用于临时映射和访问物理页，通常用于临时性操作，如内存拷贝、页表操作等。\n\n\t临时映射区的存在可以提高内核的效率和灵活性。它允许内核在需要时将物理页映射到虚拟地址空间中的特定区域，以便在处理器执行某些操作时能够直接访问这些页面。这样可以避免频繁地为临时操作分配和释放内存区域，从而提高内核的性能。\n\n\t临时映射区通常不会长时间保持映射状态，一旦临时操作完成，内核就会解除映射关系并释放相关资源，以便其他操作使用该内存区域。因此，临时映射区是一种临时性的、动态分配和释放的内存空间，用于进行内核的临时操作。\n\n![](https://cdn.xiaolincoding.com//mysql/other/0d19dc439390c46612e31ee973f83145.png)\n\n例\n![](https://cdn.xiaolincoding.com//mysql/other/fcb8b59a4b73a823603b6cbd4f720b5d.png)\n\n图中的第四步，内核会调用 `iov_iter_copy_from_user_atomic` 函数将用户空间缓冲区 DirectByteBuffer 中的待写入数据拷贝到 `page cache` 中。\n\n而内核不能直接进行拷贝，因为此时从 page cache 中取出的缓存页 page 是物理地址，而在内核中是不能够直接操作物理地址的，只能操作虚拟地址。\n\n所以就需要使用 `kmap_atomic` 将缓存页临时映射到内核空间的一段虚拟地址上，这段虚拟地址就位于内核虚拟内存空间中的临时映射区上，然后将用户空间缓存区 DirectByteBuffer 中的待写入数据通过这段映射的虚拟地址拷贝到 page cache 中的相应缓存页中。这时文件的写入操作就已经完成了。\n\n由于是临时映射，所以在拷贝完成之后，调用 `kunmap_atomic` 将这段映射再解除掉。\n\n意思就是在拷贝用户数据到 page cache 时在临时映射区建立临时的映射关系，实现拷贝的目的。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cvgpnto4qtc0",
                            "created": 1694498711765,
                            "text": "64 位体系内核虚拟内存空间布局",
                            "note": "内核态虚拟内存空间为高 128 T，虚拟内存地址范围为：`0xFFFF 8000 0000 0000 - 0xFFFF FFFF FFFF FFFF` 。\n\n在 64 位体系下的内核虚拟内存空间与物理内存的映射就变得非常简单，由于虚拟内存空间足够的大，即便是内核要访问全部的物理内存，直接映射就可以了，不在需要用到《ZONE_HIGHMEM 高端内存》小节中介绍的高端内存那种动态映射方式。\n\n![](https://cdn.xiaolincoding.com//mysql/other/e1f2e689c2754b2af540c6d0b6ab327f.png)\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cvgpsa8dpco0",
                                    "created": 1694499061274,
                                    "text": "内存空洞区域",
                                    "note": "从 `0xFFFF 8000 0000 0000 开始到 0xFFFF 8800 0000 0000` 这段地址空间是一个 `8T` 大小的`内存空洞`区域。"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvgpsr646ao0",
                                    "created": 1694499098143,
                                    "text": "直接映射区",
                                    "note": "内存空洞下一个区域就是 64T 大小的直接映射区。这个区域中的虚拟内存地址减去 `PAGE_OFFSET` 就直接得到了物理内存地址。\n\nPAGE_OFFSET 变量定义在 `/arch/x86/include/asm/page_64_types.h` 文件中：\n```c\n#define __PAGE_OFFSET_BASE      _AC(0xffff880000000000, UL)\n#define __PAGE_OFFSET           __PAGE_OFFSET_BASE\n```"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvgptsbeot40",
                                    "created": 1694499179004,
                                    "text": "vmalloc 映射区",
                                    "note": "`VMALLOC_START 到 VMALLOC_END `的这段区域是 `32T` 大小的 `vmalloc 映射区`，这里类似用户空间中的堆，内核在这里使用 vmalloc 系统调用申请内存。\n\n`/arch/x86/include/asm/pgtable_64_types.h` 文件：\n```c\n#define __VMALLOC_BASE_L4\t0xffffc90000000000UL\n\n#define VMEMMAP_START\t\t__VMEMMAP_BASE_L4\n\n#define VMALLOC_END\t\t(VMALLOC_START + (VMALLOC_SIZE_TB << 40) - 1)\n```"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvgpxay1ucg0",
                                    "created": 1694499454647,
                                    "text": "虚拟内存映射区",
                                    "note": "从 `VMEMMAP_START` 开始是 `1T` 大小的`虚拟内存映射区`，用于存放物理页面的描述符 `struct page` 结构（用来表示物理内存页）。\n\n`/arch/x86/include/asm/pgtable_64_types.h` 文件：\n```c\n#define __VMEMMAP_BASE_L4\t0xffffea0000000000UL\n\n# define VMEMMAP_START\t\t__VMEMMAP_BASE_L4\n```"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cvgpywnb3rs0",
                                    "created": 1694499580251,
                                    "text": "512M 代码段",
                                    "note": "从 `__START_KERNEL_map` 开始是大小为 `512M` 的区域用于`存放内核代码段、全局变量、BSS` 等。这里对应到物理内存开始的位置，减去 `__START_KERNEL_map` 就能得到物理内存的地址。这里和直接映射区有点像，但是不矛盾，因为直接映射区之前有 8T 的空洞区域，早就过了内核代码在物理内存中加载的位置。\n\n`/arch/x86/include/asm/page_64_types.h` 文件：\n```c\n#define __START_KERNEL_map  _AC(0xffffffff80000000, UL)\n```"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}